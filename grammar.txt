Grammar:

Rule 0     S' -> prog
Rule 1     prog -> decl_list
Rule 2     decl_list -> empty
Rule 3     decl_list -> decl decl_list
Rule 4     decl -> decl_init
Rule 5     decl -> ID : type_func ;
Rule 6     decl -> ID : type_array_sized ;
Rule 7     decl -> ID : type_simple ;
Rule 8     decl_init -> ID : type_func ASSIGN { opt_stmt_list }
Rule 9     decl_init -> ID : type_array_sized ASSIGN { opt_expr_list } ;
Rule 10    decl_init -> ID : type_simple ASSIGN expr ;
Rule 11    opt_stmt_list -> empty
Rule 12    opt_stmt_list -> stmt_list
Rule 13    stmt_list -> stmt
Rule 14    stmt_list -> stmt stmt_list
Rule 15    stmt -> closed_stmt
Rule 16    stmt -> open_stmt
Rule 17    closed_stmt -> simple_stmt
Rule 18    closed_stmt -> for_stmt_closed
Rule 19    closed_stmt -> if_stmt_closed
Rule 20    open_stmt -> for_stmt_open
Rule 21    open_stmt -> if_stmt_open
Rule 22    if_cond -> IF ( opt_expr )
Rule 23    if_stmt_closed -> if_cond closed_stmt ELSE closed_stmt
Rule 24    if_stmt_open -> if_cond closed_stmt ELSE if_stmt_open
Rule 25    if_stmt_open -> if_cond stmt
Rule 26    for_header -> FOR ( opt_expr ; opt_expr ; opt_expr )
Rule 27    for_stmt_open -> for_header open_stmt
Rule 28    for_stmt_closed -> for_header closed_stmt
Rule 29    simple_stmt -> expr ;
Rule 30    simple_stmt -> block_stmt
Rule 31    simple_stmt -> return_stmt
Rule 32    simple_stmt -> print_stmt
Rule 33    print_stmt -> PRINT opt_expr_list ;
Rule 34    return_stmt -> RETURN opt_expr ;
Rule 35    block_stmt -> { stmt_list }
Rule 36    opt_expr_list -> expr_list
Rule 37    opt_expr_list -> empty
Rule 38    expr_list -> expr
Rule 39    expr_list -> expr , expr_list
Rule 40    opt_expr -> expr
Rule 41    opt_expr -> empty
Rule 42    expr -> expr1
Rule 43    expr1 -> expr2
Rule 44    expr1 -> lval ASSIGN expr1
Rule 45    lval -> ID index
Rule 46    lval -> ID
Rule 47    expr2 -> expr3
Rule 48    expr2 -> expr2 LOR expr3
Rule 49    expr3 -> expr4
Rule 50    expr3 -> expr3 LAND expr4
Rule 51    expr4 -> expr5
Rule 52    expr4 -> expr4 GE expr5
Rule 53    expr4 -> expr4 GT expr5
Rule 54    expr4 -> expr4 LE expr5
Rule 55    expr4 -> expr4 LT expr5
Rule 56    expr4 -> expr4 NEQ expr5
Rule 57    expr4 -> expr4 EQ expr5
Rule 58    expr5 -> expr6
Rule 59    expr5 -> expr5 - expr6
Rule 60    expr5 -> expr5 + expr6
Rule 61    expr6 -> expr7
Rule 62    expr6 -> expr6 % expr7
Rule 63    expr6 -> expr6 / expr7
Rule 64    expr6 -> expr6 * expr7
Rule 65    expr7 -> expr8
Rule 66    expr7 -> expr7 ^ expr8
Rule 67    expr8 -> expr9
Rule 68    expr8 -> ! expr8
Rule 69    expr8 -> - expr8
Rule 70    expr9 -> group
Rule 71    expr9 -> expr9 DEC
Rule 72    expr9 -> expr9 INC
Rule 73    group -> factor
Rule 74    group -> ID index
Rule 75    group -> ID ( opt_expr_list )
Rule 76    group -> ( expr )
Rule 77    index -> [ expr ]
Rule 78    factor -> FALSE
Rule 79    factor -> TRUE
Rule 80    factor -> STRING_LITERAL
Rule 81    factor -> CHAR_LITERAL
Rule 82    factor -> FLOAT_LITERAL
Rule 83    factor -> INTEGER_LITERAL
Rule 84    factor -> ID
Rule 85    type_simple -> VOID
Rule 86    type_simple -> STRING
Rule 87    type_simple -> CHAR
Rule 88    type_simple -> BOOLEAN
Rule 89    type_simple -> FLOAT
Rule 90    type_simple -> INTEGER
Rule 91    type_array -> ARRAY [ ] type_array
Rule 92    type_array -> ARRAY [ ] type_simple
Rule 93    type_array_sized -> ARRAY index type_array_sized
Rule 94    type_array_sized -> ARRAY index type_simple
Rule 95    type_func -> FUNCTION type_array_sized ( opt_param_list )
Rule 96    type_func -> FUNCTION type_simple ( opt_param_list )
Rule 97    opt_param_list -> param_list
Rule 98    opt_param_list -> empty
Rule 99    param_list -> param
Rule 100   param_list -> param_list , param
Rule 101   param -> ID : type_array_sized
Rule 102   param -> ID : type_array
Rule 103   param -> ID : type_simple
Rule 104   empty -> <empty>

Unused terminals:

    DO
    AUTO
    WHILE

Terminals, with rules where they appear:

!                    : 68
%                    : 62
(                    : 22 26 75 76 95 96
)                    : 22 26 75 76 95 96
*                    : 64
+                    : 60
,                    : 39 100
-                    : 59 69
/                    : 63
:                    : 5 6 7 8 9 10 101 102 103
;                    : 5 6 7 9 10 26 26 29 33 34
ARRAY                : 91 92 93 94
ASSIGN               : 8 9 10 44
AUTO                 : 
BOOLEAN              : 88
CHAR                 : 87
CHAR_LITERAL         : 81
DEC                  : 71
DO                   : 
ELSE                 : 23 24
EQ                   : 57
FALSE                : 78
FLOAT                : 89
FLOAT_LITERAL        : 82
FOR                  : 26
FUNCTION             : 95 96
GE                   : 52
GT                   : 53
ID                   : 5 6 7 8 9 10 45 46 74 75 84 101 102 103
IF                   : 22
INC                  : 72
INTEGER              : 90
INTEGER_LITERAL      : 83
LAND                 : 50
LE                   : 54
LOR                  : 48
LT                   : 55
NEQ                  : 56
PRINT                : 33
RETURN               : 34
STRING               : 86
STRING_LITERAL       : 80
TRUE                 : 79
VOID                 : 85
WHILE                : 
[                    : 77 91 92
]                    : 77 91 92
^                    : 66
error                : 
{                    : 8 9 35
}                    : 8 9 35

Nonterminals, with rules where they appear:

block_stmt           : 30
closed_stmt          : 15 23 23 24 28
decl                 : 3
decl_init            : 4
decl_list            : 1 3
empty                : 2 11 37 41 98
expr                 : 10 29 38 39 40 76 77
expr1                : 42 44
expr2                : 43 48
expr3                : 47 48 50
expr4                : 49 50 52 53 54 55 56 57
expr5                : 51 52 53 54 55 56 57 59 60
expr6                : 58 59 60 62 63 64
expr7                : 61 62 63 64 66
expr8                : 65 66 68 69
expr9                : 67 71 72
expr_list            : 36 39
factor               : 73
for_header           : 27 28
for_stmt_closed      : 18
for_stmt_open        : 20
group                : 70
if_cond              : 23 24 25
if_stmt_closed       : 19
if_stmt_open         : 21 24
index                : 45 74 93 94
lval                 : 44
open_stmt            : 16 27
opt_expr             : 22 26 26 26 34
opt_expr_list        : 9 33 75
opt_param_list       : 95 96
opt_stmt_list        : 8
param                : 99 100
param_list           : 97 100
print_stmt           : 32
prog                 : 0
return_stmt          : 31
simple_stmt          : 17
stmt                 : 13 14 25
stmt_list            : 12 14 35
type_array           : 91 102
type_array_sized     : 6 9 93 95 101
type_func            : 5 8
type_simple          : 7 10 92 94 96 103


state 0

    (0) S' -> . prog
    (1) prog -> . decl_list
    (2) decl_list -> . empty
    (3) decl_list -> . decl decl_list
    (104) empty -> .
    (4) decl -> . decl_init
    (5) decl -> . ID : type_func ;
    (6) decl -> . ID : type_array_sized ;
    (7) decl -> . ID : type_simple ;
    (8) decl_init -> . ID : type_func ASSIGN { opt_stmt_list }
    (9) decl_init -> . ID : type_array_sized ASSIGN { opt_expr_list } ;
    (10) decl_init -> . ID : type_simple ASSIGN expr ;
    $end            reduce using rule 104 (empty -> .)
    ID              shift and go to state 6

    prog                           shift and go to state 1
    decl_list                      shift and go to state 2
    empty                          shift and go to state 3
    decl                           shift and go to state 4
    decl_init                      shift and go to state 5

state 1

    (0) S' -> prog .


state 2

    (1) prog -> decl_list .
    $end            reduce using rule 1 (prog -> decl_list .)


state 3

    (2) decl_list -> empty .
    $end            reduce using rule 2 (decl_list -> empty .)


state 4

    (3) decl_list -> decl . decl_list
    (2) decl_list -> . empty
    (3) decl_list -> . decl decl_list
    (104) empty -> .
    (4) decl -> . decl_init
    (5) decl -> . ID : type_func ;
    (6) decl -> . ID : type_array_sized ;
    (7) decl -> . ID : type_simple ;
    (8) decl_init -> . ID : type_func ASSIGN { opt_stmt_list }
    (9) decl_init -> . ID : type_array_sized ASSIGN { opt_expr_list } ;
    (10) decl_init -> . ID : type_simple ASSIGN expr ;
    $end            reduce using rule 104 (empty -> .)
    ID              shift and go to state 6

    decl                           shift and go to state 4
    decl_list                      shift and go to state 7
    empty                          shift and go to state 3
    decl_init                      shift and go to state 5

state 5

    (4) decl -> decl_init .
    ID              reduce using rule 4 (decl -> decl_init .)
    $end            reduce using rule 4 (decl -> decl_init .)


state 6

    (5) decl -> ID . : type_func ;
    (6) decl -> ID . : type_array_sized ;
    (7) decl -> ID . : type_simple ;
    (8) decl_init -> ID . : type_func ASSIGN { opt_stmt_list }
    (9) decl_init -> ID . : type_array_sized ASSIGN { opt_expr_list } ;
    (10) decl_init -> ID . : type_simple ASSIGN expr ;
    :               shift and go to state 8


state 7

    (3) decl_list -> decl decl_list .
    $end            reduce using rule 3 (decl_list -> decl decl_list .)


state 8

    (5) decl -> ID : . type_func ;
    (6) decl -> ID : . type_array_sized ;
    (7) decl -> ID : . type_simple ;
    (8) decl_init -> ID : . type_func ASSIGN { opt_stmt_list }
    (9) decl_init -> ID : . type_array_sized ASSIGN { opt_expr_list } ;
    (10) decl_init -> ID : . type_simple ASSIGN expr ;
    (95) type_func -> . FUNCTION type_array_sized ( opt_param_list )
    (96) type_func -> . FUNCTION type_simple ( opt_param_list )
    (93) type_array_sized -> . ARRAY index type_array_sized
    (94) type_array_sized -> . ARRAY index type_simple
    (85) type_simple -> . VOID
    (86) type_simple -> . STRING
    (87) type_simple -> . CHAR
    (88) type_simple -> . BOOLEAN
    (89) type_simple -> . FLOAT
    (90) type_simple -> . INTEGER
    FUNCTION        shift and go to state 12
    ARRAY           shift and go to state 13
    VOID            shift and go to state 14
    STRING          shift and go to state 15
    CHAR            shift and go to state 16
    BOOLEAN         shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    type_func                      shift and go to state 9
    type_array_sized               shift and go to state 10
    type_simple                    shift and go to state 11

state 9

    (5) decl -> ID : type_func . ;
    (8) decl_init -> ID : type_func . ASSIGN { opt_stmt_list }
    ;               shift and go to state 20
    ASSIGN          shift and go to state 21


state 10

    (6) decl -> ID : type_array_sized . ;
    (9) decl_init -> ID : type_array_sized . ASSIGN { opt_expr_list } ;
    ;               shift and go to state 22
    ASSIGN          shift and go to state 23


state 11

    (7) decl -> ID : type_simple . ;
    (10) decl_init -> ID : type_simple . ASSIGN expr ;
    ;               shift and go to state 24
    ASSIGN          shift and go to state 25


state 12

    (95) type_func -> FUNCTION . type_array_sized ( opt_param_list )
    (96) type_func -> FUNCTION . type_simple ( opt_param_list )
    (93) type_array_sized -> . ARRAY index type_array_sized
    (94) type_array_sized -> . ARRAY index type_simple
    (85) type_simple -> . VOID
    (86) type_simple -> . STRING
    (87) type_simple -> . CHAR
    (88) type_simple -> . BOOLEAN
    (89) type_simple -> . FLOAT
    (90) type_simple -> . INTEGER
    ARRAY           shift and go to state 13
    VOID            shift and go to state 14
    STRING          shift and go to state 15
    CHAR            shift and go to state 16
    BOOLEAN         shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    type_array_sized               shift and go to state 26
    type_simple                    shift and go to state 27

state 13

    (93) type_array_sized -> ARRAY . index type_array_sized
    (94) type_array_sized -> ARRAY . index type_simple
    (77) index -> . [ expr ]
    [               shift and go to state 29

    index                          shift and go to state 28

state 14

    (85) type_simple -> VOID .
    ;               reduce using rule 85 (type_simple -> VOID .)
    ASSIGN          reduce using rule 85 (type_simple -> VOID .)
    (               reduce using rule 85 (type_simple -> VOID .)
    ,               reduce using rule 85 (type_simple -> VOID .)
    )               reduce using rule 85 (type_simple -> VOID .)


state 15

    (86) type_simple -> STRING .
    ;               reduce using rule 86 (type_simple -> STRING .)
    ASSIGN          reduce using rule 86 (type_simple -> STRING .)
    (               reduce using rule 86 (type_simple -> STRING .)
    ,               reduce using rule 86 (type_simple -> STRING .)
    )               reduce using rule 86 (type_simple -> STRING .)


state 16

    (87) type_simple -> CHAR .
    ;               reduce using rule 87 (type_simple -> CHAR .)
    ASSIGN          reduce using rule 87 (type_simple -> CHAR .)
    (               reduce using rule 87 (type_simple -> CHAR .)
    ,               reduce using rule 87 (type_simple -> CHAR .)
    )               reduce using rule 87 (type_simple -> CHAR .)


state 17

    (88) type_simple -> BOOLEAN .
    ;               reduce using rule 88 (type_simple -> BOOLEAN .)
    ASSIGN          reduce using rule 88 (type_simple -> BOOLEAN .)
    (               reduce using rule 88 (type_simple -> BOOLEAN .)
    ,               reduce using rule 88 (type_simple -> BOOLEAN .)
    )               reduce using rule 88 (type_simple -> BOOLEAN .)


state 18

    (89) type_simple -> FLOAT .
    ;               reduce using rule 89 (type_simple -> FLOAT .)
    ASSIGN          reduce using rule 89 (type_simple -> FLOAT .)
    (               reduce using rule 89 (type_simple -> FLOAT .)
    ,               reduce using rule 89 (type_simple -> FLOAT .)
    )               reduce using rule 89 (type_simple -> FLOAT .)


state 19

    (90) type_simple -> INTEGER .
    ;               reduce using rule 90 (type_simple -> INTEGER .)
    ASSIGN          reduce using rule 90 (type_simple -> INTEGER .)
    (               reduce using rule 90 (type_simple -> INTEGER .)
    ,               reduce using rule 90 (type_simple -> INTEGER .)
    )               reduce using rule 90 (type_simple -> INTEGER .)


state 20

    (5) decl -> ID : type_func ; .
    ID              reduce using rule 5 (decl -> ID : type_func ; .)
    $end            reduce using rule 5 (decl -> ID : type_func ; .)


state 21

    (8) decl_init -> ID : type_func ASSIGN . { opt_stmt_list }
    {               shift and go to state 30


state 22

    (6) decl -> ID : type_array_sized ; .
    ID              reduce using rule 6 (decl -> ID : type_array_sized ; .)
    $end            reduce using rule 6 (decl -> ID : type_array_sized ; .)


state 23

    (9) decl_init -> ID : type_array_sized ASSIGN . { opt_expr_list } ;
    {               shift and go to state 31


state 24

    (7) decl -> ID : type_simple ; .
    ID              reduce using rule 7 (decl -> ID : type_simple ; .)
    $end            reduce using rule 7 (decl -> ID : type_simple ; .)


state 25

    (10) decl_init -> ID : type_simple ASSIGN . expr ;
    (42) expr -> . expr1
    (43) expr1 -> . expr2
    (44) expr1 -> . lval ASSIGN expr1
    (47) expr2 -> . expr3
    (48) expr2 -> . expr2 LOR expr3
    (45) lval -> . ID index
    (46) lval -> . ID
    (49) expr3 -> . expr4
    (50) expr3 -> . expr3 LAND expr4
    (51) expr4 -> . expr5
    (52) expr4 -> . expr4 GE expr5
    (53) expr4 -> . expr4 GT expr5
    (54) expr4 -> . expr4 LE expr5
    (55) expr4 -> . expr4 LT expr5
    (56) expr4 -> . expr4 NEQ expr5
    (57) expr4 -> . expr4 EQ expr5
    (58) expr5 -> . expr6
    (59) expr5 -> . expr5 - expr6
    (60) expr5 -> . expr5 + expr6
    (61) expr6 -> . expr7
    (62) expr6 -> . expr6 % expr7
    (63) expr6 -> . expr6 / expr7
    (64) expr6 -> . expr6 * expr7
    (65) expr7 -> . expr8
    (66) expr7 -> . expr7 ^ expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    ID              shift and go to state 32
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    expr                           shift and go to state 33
    expr1                          shift and go to state 34
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 26

    (95) type_func -> FUNCTION type_array_sized . ( opt_param_list )
    (               shift and go to state 55


state 27

    (96) type_func -> FUNCTION type_simple . ( opt_param_list )
    (               shift and go to state 56


state 28

    (93) type_array_sized -> ARRAY index . type_array_sized
    (94) type_array_sized -> ARRAY index . type_simple
    (93) type_array_sized -> . ARRAY index type_array_sized
    (94) type_array_sized -> . ARRAY index type_simple
    (85) type_simple -> . VOID
    (86) type_simple -> . STRING
    (87) type_simple -> . CHAR
    (88) type_simple -> . BOOLEAN
    (89) type_simple -> . FLOAT
    (90) type_simple -> . INTEGER
    ARRAY           shift and go to state 13
    VOID            shift and go to state 14
    STRING          shift and go to state 15
    CHAR            shift and go to state 16
    BOOLEAN         shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    type_array_sized               shift and go to state 57
    type_simple                    shift and go to state 58

state 29

    (77) index -> [ . expr ]
    (42) expr -> . expr1
    (43) expr1 -> . expr2
    (44) expr1 -> . lval ASSIGN expr1
    (47) expr2 -> . expr3
    (48) expr2 -> . expr2 LOR expr3
    (45) lval -> . ID index
    (46) lval -> . ID
    (49) expr3 -> . expr4
    (50) expr3 -> . expr3 LAND expr4
    (51) expr4 -> . expr5
    (52) expr4 -> . expr4 GE expr5
    (53) expr4 -> . expr4 GT expr5
    (54) expr4 -> . expr4 LE expr5
    (55) expr4 -> . expr4 LT expr5
    (56) expr4 -> . expr4 NEQ expr5
    (57) expr4 -> . expr4 EQ expr5
    (58) expr5 -> . expr6
    (59) expr5 -> . expr5 - expr6
    (60) expr5 -> . expr5 + expr6
    (61) expr6 -> . expr7
    (62) expr6 -> . expr6 % expr7
    (63) expr6 -> . expr6 / expr7
    (64) expr6 -> . expr6 * expr7
    (65) expr7 -> . expr8
    (66) expr7 -> . expr7 ^ expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    ID              shift and go to state 32
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    expr                           shift and go to state 59
    expr1                          shift and go to state 34
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 30

    (8) decl_init -> ID : type_func ASSIGN { . opt_stmt_list }
    (11) opt_stmt_list -> . empty
    (12) opt_stmt_list -> . stmt_list
    (104) empty -> .
    (13) stmt_list -> . stmt
    (14) stmt_list -> . stmt stmt_list
    (15) stmt -> . closed_stmt
    (16) stmt -> . open_stmt
    (17) closed_stmt -> . simple_stmt
    (18) closed_stmt -> . for_stmt_closed
    (19) closed_stmt -> . if_stmt_closed
    (20) open_stmt -> . for_stmt_open
    (21) open_stmt -> . if_stmt_open
    (29) simple_stmt -> . expr ;
    (30) simple_stmt -> . block_stmt
    (31) simple_stmt -> . return_stmt
    (32) simple_stmt -> . print_stmt
    (28) for_stmt_closed -> . for_header closed_stmt
    (23) if_stmt_closed -> . if_cond closed_stmt ELSE closed_stmt
    (27) for_stmt_open -> . for_header open_stmt
    (24) if_stmt_open -> . if_cond closed_stmt ELSE if_stmt_open
    (25) if_stmt_open -> . if_cond stmt
    (42) expr -> . expr1
    (35) block_stmt -> . { stmt_list }
    (34) return_stmt -> . RETURN opt_expr ;
    (33) print_stmt -> . PRINT opt_expr_list ;
    (26) for_header -> . FOR ( opt_expr ; opt_expr ; opt_expr )
    (22) if_cond -> . IF ( opt_expr )
    (43) expr1 -> . expr2
    (44) expr1 -> . lval ASSIGN expr1
    (47) expr2 -> . expr3
    (48) expr2 -> . expr2 LOR expr3
    (45) lval -> . ID index
    (46) lval -> . ID
    (49) expr3 -> . expr4
    (50) expr3 -> . expr3 LAND expr4
    (51) expr4 -> . expr5
    (52) expr4 -> . expr4 GE expr5
    (53) expr4 -> . expr4 GT expr5
    (54) expr4 -> . expr4 LE expr5
    (55) expr4 -> . expr4 LT expr5
    (56) expr4 -> . expr4 NEQ expr5
    (57) expr4 -> . expr4 EQ expr5
    (58) expr5 -> . expr6
    (59) expr5 -> . expr5 - expr6
    (60) expr5 -> . expr5 + expr6
    (61) expr6 -> . expr7
    (62) expr6 -> . expr6 % expr7
    (63) expr6 -> . expr6 / expr7
    (64) expr6 -> . expr6 * expr7
    (65) expr7 -> . expr8
    (66) expr7 -> . expr7 ^ expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    }               reduce using rule 104 (empty -> .)
    {               shift and go to state 60
    RETURN          shift and go to state 78
    PRINT           shift and go to state 79
    FOR             shift and go to state 80
    IF              shift and go to state 81
    ID              shift and go to state 32
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    opt_stmt_list                  shift and go to state 61
    empty                          shift and go to state 62
    stmt_list                      shift and go to state 63
    stmt                           shift and go to state 64
    closed_stmt                    shift and go to state 65
    open_stmt                      shift and go to state 66
    simple_stmt                    shift and go to state 67
    for_stmt_closed                shift and go to state 68
    if_stmt_closed                 shift and go to state 69
    for_stmt_open                  shift and go to state 70
    if_stmt_open                   shift and go to state 71
    expr                           shift and go to state 72
    block_stmt                     shift and go to state 73
    return_stmt                    shift and go to state 74
    print_stmt                     shift and go to state 75
    for_header                     shift and go to state 76
    if_cond                        shift and go to state 77
    expr1                          shift and go to state 34
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 31

    (9) decl_init -> ID : type_array_sized ASSIGN { . opt_expr_list } ;
    (36) opt_expr_list -> . expr_list
    (37) opt_expr_list -> . empty
    (38) expr_list -> . expr
    (39) expr_list -> . expr , expr_list
    (104) empty -> .
    (42) expr -> . expr1
    (43) expr1 -> . expr2
    (44) expr1 -> . lval ASSIGN expr1
    (47) expr2 -> . expr3
    (48) expr2 -> . expr2 LOR expr3
    (45) lval -> . ID index
    (46) lval -> . ID
    (49) expr3 -> . expr4
    (50) expr3 -> . expr3 LAND expr4
    (51) expr4 -> . expr5
    (52) expr4 -> . expr4 GE expr5
    (53) expr4 -> . expr4 GT expr5
    (54) expr4 -> . expr4 LE expr5
    (55) expr4 -> . expr4 LT expr5
    (56) expr4 -> . expr4 NEQ expr5
    (57) expr4 -> . expr4 EQ expr5
    (58) expr5 -> . expr6
    (59) expr5 -> . expr5 - expr6
    (60) expr5 -> . expr5 + expr6
    (61) expr6 -> . expr7
    (62) expr6 -> . expr6 % expr7
    (63) expr6 -> . expr6 / expr7
    (64) expr6 -> . expr6 * expr7
    (65) expr7 -> . expr8
    (66) expr7 -> . expr7 ^ expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    }               reduce using rule 104 (empty -> .)
    ID              shift and go to state 32
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    opt_expr_list                  shift and go to state 82
    expr_list                      shift and go to state 83
    empty                          shift and go to state 84
    expr                           shift and go to state 85
    expr1                          shift and go to state 34
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 32

    (45) lval -> ID . index
    (46) lval -> ID .
    (74) group -> ID . index
    (75) group -> ID . ( opt_expr_list )
    (84) factor -> ID .
    (77) index -> . [ expr ]
    ASSIGN          reduce using rule 46 (lval -> ID .)
    (               shift and go to state 87
    DEC             reduce using rule 84 (factor -> ID .)
    INC             reduce using rule 84 (factor -> ID .)
    ^               reduce using rule 84 (factor -> ID .)
    %               reduce using rule 84 (factor -> ID .)
    /               reduce using rule 84 (factor -> ID .)
    *               reduce using rule 84 (factor -> ID .)
    -               reduce using rule 84 (factor -> ID .)
    +               reduce using rule 84 (factor -> ID .)
    GE              reduce using rule 84 (factor -> ID .)
    GT              reduce using rule 84 (factor -> ID .)
    LE              reduce using rule 84 (factor -> ID .)
    LT              reduce using rule 84 (factor -> ID .)
    NEQ             reduce using rule 84 (factor -> ID .)
    EQ              reduce using rule 84 (factor -> ID .)
    LAND            reduce using rule 84 (factor -> ID .)
    LOR             reduce using rule 84 (factor -> ID .)
    ;               reduce using rule 84 (factor -> ID .)
    ]               reduce using rule 84 (factor -> ID .)
    ,               reduce using rule 84 (factor -> ID .)
    }               reduce using rule 84 (factor -> ID .)
    )               reduce using rule 84 (factor -> ID .)
    [               shift and go to state 29

    index                          shift and go to state 86

state 33

    (10) decl_init -> ID : type_simple ASSIGN expr . ;
    ;               shift and go to state 88


state 34

    (42) expr -> expr1 .
    ;               reduce using rule 42 (expr -> expr1 .)
    ]               reduce using rule 42 (expr -> expr1 .)
    ,               reduce using rule 42 (expr -> expr1 .)
    }               reduce using rule 42 (expr -> expr1 .)
    )               reduce using rule 42 (expr -> expr1 .)


state 35

    (43) expr1 -> expr2 .
    (48) expr2 -> expr2 . LOR expr3
    ;               reduce using rule 43 (expr1 -> expr2 .)
    ]               reduce using rule 43 (expr1 -> expr2 .)
    ,               reduce using rule 43 (expr1 -> expr2 .)
    }               reduce using rule 43 (expr1 -> expr2 .)
    )               reduce using rule 43 (expr1 -> expr2 .)
    LOR             shift and go to state 89


state 36

    (44) expr1 -> lval . ASSIGN expr1
    ASSIGN          shift and go to state 90


state 37

    (47) expr2 -> expr3 .
    (50) expr3 -> expr3 . LAND expr4
    LOR             reduce using rule 47 (expr2 -> expr3 .)
    ;               reduce using rule 47 (expr2 -> expr3 .)
    ]               reduce using rule 47 (expr2 -> expr3 .)
    ,               reduce using rule 47 (expr2 -> expr3 .)
    }               reduce using rule 47 (expr2 -> expr3 .)
    )               reduce using rule 47 (expr2 -> expr3 .)
    LAND            shift and go to state 91


state 38

    (49) expr3 -> expr4 .
    (52) expr4 -> expr4 . GE expr5
    (53) expr4 -> expr4 . GT expr5
    (54) expr4 -> expr4 . LE expr5
    (55) expr4 -> expr4 . LT expr5
    (56) expr4 -> expr4 . NEQ expr5
    (57) expr4 -> expr4 . EQ expr5
    LAND            reduce using rule 49 (expr3 -> expr4 .)
    LOR             reduce using rule 49 (expr3 -> expr4 .)
    ;               reduce using rule 49 (expr3 -> expr4 .)
    ]               reduce using rule 49 (expr3 -> expr4 .)
    ,               reduce using rule 49 (expr3 -> expr4 .)
    }               reduce using rule 49 (expr3 -> expr4 .)
    )               reduce using rule 49 (expr3 -> expr4 .)
    GE              shift and go to state 92
    GT              shift and go to state 93
    LE              shift and go to state 94
    LT              shift and go to state 95
    NEQ             shift and go to state 96
    EQ              shift and go to state 97


state 39

    (51) expr4 -> expr5 .
    (59) expr5 -> expr5 . - expr6
    (60) expr5 -> expr5 . + expr6
    GE              reduce using rule 51 (expr4 -> expr5 .)
    GT              reduce using rule 51 (expr4 -> expr5 .)
    LE              reduce using rule 51 (expr4 -> expr5 .)
    LT              reduce using rule 51 (expr4 -> expr5 .)
    NEQ             reduce using rule 51 (expr4 -> expr5 .)
    EQ              reduce using rule 51 (expr4 -> expr5 .)
    LAND            reduce using rule 51 (expr4 -> expr5 .)
    LOR             reduce using rule 51 (expr4 -> expr5 .)
    ;               reduce using rule 51 (expr4 -> expr5 .)
    ]               reduce using rule 51 (expr4 -> expr5 .)
    ,               reduce using rule 51 (expr4 -> expr5 .)
    }               reduce using rule 51 (expr4 -> expr5 .)
    )               reduce using rule 51 (expr4 -> expr5 .)
    -               shift and go to state 98
    +               shift and go to state 99


state 40

    (58) expr5 -> expr6 .
    (62) expr6 -> expr6 . % expr7
    (63) expr6 -> expr6 . / expr7
    (64) expr6 -> expr6 . * expr7
    -               reduce using rule 58 (expr5 -> expr6 .)
    +               reduce using rule 58 (expr5 -> expr6 .)
    GE              reduce using rule 58 (expr5 -> expr6 .)
    GT              reduce using rule 58 (expr5 -> expr6 .)
    LE              reduce using rule 58 (expr5 -> expr6 .)
    LT              reduce using rule 58 (expr5 -> expr6 .)
    NEQ             reduce using rule 58 (expr5 -> expr6 .)
    EQ              reduce using rule 58 (expr5 -> expr6 .)
    LAND            reduce using rule 58 (expr5 -> expr6 .)
    LOR             reduce using rule 58 (expr5 -> expr6 .)
    ;               reduce using rule 58 (expr5 -> expr6 .)
    ]               reduce using rule 58 (expr5 -> expr6 .)
    ,               reduce using rule 58 (expr5 -> expr6 .)
    }               reduce using rule 58 (expr5 -> expr6 .)
    )               reduce using rule 58 (expr5 -> expr6 .)
    %               shift and go to state 100
    /               shift and go to state 101
    *               shift and go to state 102


state 41

    (69) expr8 -> - . expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    !               shift and go to state 45
    -               shift and go to state 41
    ID              shift and go to state 104
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    expr8                          shift and go to state 103
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 42

    (61) expr6 -> expr7 .
    (66) expr7 -> expr7 . ^ expr8
    %               reduce using rule 61 (expr6 -> expr7 .)
    /               reduce using rule 61 (expr6 -> expr7 .)
    *               reduce using rule 61 (expr6 -> expr7 .)
    -               reduce using rule 61 (expr6 -> expr7 .)
    +               reduce using rule 61 (expr6 -> expr7 .)
    GE              reduce using rule 61 (expr6 -> expr7 .)
    GT              reduce using rule 61 (expr6 -> expr7 .)
    LE              reduce using rule 61 (expr6 -> expr7 .)
    LT              reduce using rule 61 (expr6 -> expr7 .)
    NEQ             reduce using rule 61 (expr6 -> expr7 .)
    EQ              reduce using rule 61 (expr6 -> expr7 .)
    LAND            reduce using rule 61 (expr6 -> expr7 .)
    LOR             reduce using rule 61 (expr6 -> expr7 .)
    ;               reduce using rule 61 (expr6 -> expr7 .)
    ]               reduce using rule 61 (expr6 -> expr7 .)
    ,               reduce using rule 61 (expr6 -> expr7 .)
    }               reduce using rule 61 (expr6 -> expr7 .)
    )               reduce using rule 61 (expr6 -> expr7 .)
    ^               shift and go to state 105


state 43

    (65) expr7 -> expr8 .
    ^               reduce using rule 65 (expr7 -> expr8 .)
    %               reduce using rule 65 (expr7 -> expr8 .)
    /               reduce using rule 65 (expr7 -> expr8 .)
    *               reduce using rule 65 (expr7 -> expr8 .)
    -               reduce using rule 65 (expr7 -> expr8 .)
    +               reduce using rule 65 (expr7 -> expr8 .)
    GE              reduce using rule 65 (expr7 -> expr8 .)
    GT              reduce using rule 65 (expr7 -> expr8 .)
    LE              reduce using rule 65 (expr7 -> expr8 .)
    LT              reduce using rule 65 (expr7 -> expr8 .)
    NEQ             reduce using rule 65 (expr7 -> expr8 .)
    EQ              reduce using rule 65 (expr7 -> expr8 .)
    LAND            reduce using rule 65 (expr7 -> expr8 .)
    LOR             reduce using rule 65 (expr7 -> expr8 .)
    ;               reduce using rule 65 (expr7 -> expr8 .)
    ]               reduce using rule 65 (expr7 -> expr8 .)
    ,               reduce using rule 65 (expr7 -> expr8 .)
    }               reduce using rule 65 (expr7 -> expr8 .)
    )               reduce using rule 65 (expr7 -> expr8 .)


state 44

    (67) expr8 -> expr9 .
    (71) expr9 -> expr9 . DEC
    (72) expr9 -> expr9 . INC
    ^               reduce using rule 67 (expr8 -> expr9 .)
    %               reduce using rule 67 (expr8 -> expr9 .)
    /               reduce using rule 67 (expr8 -> expr9 .)
    *               reduce using rule 67 (expr8 -> expr9 .)
    -               reduce using rule 67 (expr8 -> expr9 .)
    +               reduce using rule 67 (expr8 -> expr9 .)
    GE              reduce using rule 67 (expr8 -> expr9 .)
    GT              reduce using rule 67 (expr8 -> expr9 .)
    LE              reduce using rule 67 (expr8 -> expr9 .)
    LT              reduce using rule 67 (expr8 -> expr9 .)
    NEQ             reduce using rule 67 (expr8 -> expr9 .)
    EQ              reduce using rule 67 (expr8 -> expr9 .)
    LAND            reduce using rule 67 (expr8 -> expr9 .)
    LOR             reduce using rule 67 (expr8 -> expr9 .)
    ;               reduce using rule 67 (expr8 -> expr9 .)
    ]               reduce using rule 67 (expr8 -> expr9 .)
    ,               reduce using rule 67 (expr8 -> expr9 .)
    }               reduce using rule 67 (expr8 -> expr9 .)
    )               reduce using rule 67 (expr8 -> expr9 .)
    DEC             shift and go to state 106
    INC             shift and go to state 107


state 45

    (68) expr8 -> ! . expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    !               shift and go to state 45
    -               shift and go to state 41
    ID              shift and go to state 104
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    expr8                          shift and go to state 108
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 46

    (70) expr9 -> group .
    DEC             reduce using rule 70 (expr9 -> group .)
    INC             reduce using rule 70 (expr9 -> group .)
    ^               reduce using rule 70 (expr9 -> group .)
    %               reduce using rule 70 (expr9 -> group .)
    /               reduce using rule 70 (expr9 -> group .)
    *               reduce using rule 70 (expr9 -> group .)
    -               reduce using rule 70 (expr9 -> group .)
    +               reduce using rule 70 (expr9 -> group .)
    GE              reduce using rule 70 (expr9 -> group .)
    GT              reduce using rule 70 (expr9 -> group .)
    LE              reduce using rule 70 (expr9 -> group .)
    LT              reduce using rule 70 (expr9 -> group .)
    NEQ             reduce using rule 70 (expr9 -> group .)
    EQ              reduce using rule 70 (expr9 -> group .)
    LAND            reduce using rule 70 (expr9 -> group .)
    LOR             reduce using rule 70 (expr9 -> group .)
    ;               reduce using rule 70 (expr9 -> group .)
    ]               reduce using rule 70 (expr9 -> group .)
    ,               reduce using rule 70 (expr9 -> group .)
    }               reduce using rule 70 (expr9 -> group .)
    )               reduce using rule 70 (expr9 -> group .)


state 47

    (73) group -> factor .
    DEC             reduce using rule 73 (group -> factor .)
    INC             reduce using rule 73 (group -> factor .)
    ^               reduce using rule 73 (group -> factor .)
    %               reduce using rule 73 (group -> factor .)
    /               reduce using rule 73 (group -> factor .)
    *               reduce using rule 73 (group -> factor .)
    -               reduce using rule 73 (group -> factor .)
    +               reduce using rule 73 (group -> factor .)
    GE              reduce using rule 73 (group -> factor .)
    GT              reduce using rule 73 (group -> factor .)
    LE              reduce using rule 73 (group -> factor .)
    LT              reduce using rule 73 (group -> factor .)
    NEQ             reduce using rule 73 (group -> factor .)
    EQ              reduce using rule 73 (group -> factor .)
    LAND            reduce using rule 73 (group -> factor .)
    LOR             reduce using rule 73 (group -> factor .)
    ;               reduce using rule 73 (group -> factor .)
    ]               reduce using rule 73 (group -> factor .)
    ,               reduce using rule 73 (group -> factor .)
    }               reduce using rule 73 (group -> factor .)
    )               reduce using rule 73 (group -> factor .)


state 48

    (76) group -> ( . expr )
    (42) expr -> . expr1
    (43) expr1 -> . expr2
    (44) expr1 -> . lval ASSIGN expr1
    (47) expr2 -> . expr3
    (48) expr2 -> . expr2 LOR expr3
    (45) lval -> . ID index
    (46) lval -> . ID
    (49) expr3 -> . expr4
    (50) expr3 -> . expr3 LAND expr4
    (51) expr4 -> . expr5
    (52) expr4 -> . expr4 GE expr5
    (53) expr4 -> . expr4 GT expr5
    (54) expr4 -> . expr4 LE expr5
    (55) expr4 -> . expr4 LT expr5
    (56) expr4 -> . expr4 NEQ expr5
    (57) expr4 -> . expr4 EQ expr5
    (58) expr5 -> . expr6
    (59) expr5 -> . expr5 - expr6
    (60) expr5 -> . expr5 + expr6
    (61) expr6 -> . expr7
    (62) expr6 -> . expr6 % expr7
    (63) expr6 -> . expr6 / expr7
    (64) expr6 -> . expr6 * expr7
    (65) expr7 -> . expr8
    (66) expr7 -> . expr7 ^ expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    ID              shift and go to state 32
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    expr                           shift and go to state 109
    expr1                          shift and go to state 34
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 49

    (78) factor -> FALSE .
    DEC             reduce using rule 78 (factor -> FALSE .)
    INC             reduce using rule 78 (factor -> FALSE .)
    ^               reduce using rule 78 (factor -> FALSE .)
    %               reduce using rule 78 (factor -> FALSE .)
    /               reduce using rule 78 (factor -> FALSE .)
    *               reduce using rule 78 (factor -> FALSE .)
    -               reduce using rule 78 (factor -> FALSE .)
    +               reduce using rule 78 (factor -> FALSE .)
    GE              reduce using rule 78 (factor -> FALSE .)
    GT              reduce using rule 78 (factor -> FALSE .)
    LE              reduce using rule 78 (factor -> FALSE .)
    LT              reduce using rule 78 (factor -> FALSE .)
    NEQ             reduce using rule 78 (factor -> FALSE .)
    EQ              reduce using rule 78 (factor -> FALSE .)
    LAND            reduce using rule 78 (factor -> FALSE .)
    LOR             reduce using rule 78 (factor -> FALSE .)
    ;               reduce using rule 78 (factor -> FALSE .)
    ]               reduce using rule 78 (factor -> FALSE .)
    ,               reduce using rule 78 (factor -> FALSE .)
    }               reduce using rule 78 (factor -> FALSE .)
    )               reduce using rule 78 (factor -> FALSE .)


state 50

    (79) factor -> TRUE .
    DEC             reduce using rule 79 (factor -> TRUE .)
    INC             reduce using rule 79 (factor -> TRUE .)
    ^               reduce using rule 79 (factor -> TRUE .)
    %               reduce using rule 79 (factor -> TRUE .)
    /               reduce using rule 79 (factor -> TRUE .)
    *               reduce using rule 79 (factor -> TRUE .)
    -               reduce using rule 79 (factor -> TRUE .)
    +               reduce using rule 79 (factor -> TRUE .)
    GE              reduce using rule 79 (factor -> TRUE .)
    GT              reduce using rule 79 (factor -> TRUE .)
    LE              reduce using rule 79 (factor -> TRUE .)
    LT              reduce using rule 79 (factor -> TRUE .)
    NEQ             reduce using rule 79 (factor -> TRUE .)
    EQ              reduce using rule 79 (factor -> TRUE .)
    LAND            reduce using rule 79 (factor -> TRUE .)
    LOR             reduce using rule 79 (factor -> TRUE .)
    ;               reduce using rule 79 (factor -> TRUE .)
    ]               reduce using rule 79 (factor -> TRUE .)
    ,               reduce using rule 79 (factor -> TRUE .)
    }               reduce using rule 79 (factor -> TRUE .)
    )               reduce using rule 79 (factor -> TRUE .)


state 51

    (80) factor -> STRING_LITERAL .
    DEC             reduce using rule 80 (factor -> STRING_LITERAL .)
    INC             reduce using rule 80 (factor -> STRING_LITERAL .)
    ^               reduce using rule 80 (factor -> STRING_LITERAL .)
    %               reduce using rule 80 (factor -> STRING_LITERAL .)
    /               reduce using rule 80 (factor -> STRING_LITERAL .)
    *               reduce using rule 80 (factor -> STRING_LITERAL .)
    -               reduce using rule 80 (factor -> STRING_LITERAL .)
    +               reduce using rule 80 (factor -> STRING_LITERAL .)
    GE              reduce using rule 80 (factor -> STRING_LITERAL .)
    GT              reduce using rule 80 (factor -> STRING_LITERAL .)
    LE              reduce using rule 80 (factor -> STRING_LITERAL .)
    LT              reduce using rule 80 (factor -> STRING_LITERAL .)
    NEQ             reduce using rule 80 (factor -> STRING_LITERAL .)
    EQ              reduce using rule 80 (factor -> STRING_LITERAL .)
    LAND            reduce using rule 80 (factor -> STRING_LITERAL .)
    LOR             reduce using rule 80 (factor -> STRING_LITERAL .)
    ;               reduce using rule 80 (factor -> STRING_LITERAL .)
    ]               reduce using rule 80 (factor -> STRING_LITERAL .)
    ,               reduce using rule 80 (factor -> STRING_LITERAL .)
    }               reduce using rule 80 (factor -> STRING_LITERAL .)
    )               reduce using rule 80 (factor -> STRING_LITERAL .)


state 52

    (81) factor -> CHAR_LITERAL .
    DEC             reduce using rule 81 (factor -> CHAR_LITERAL .)
    INC             reduce using rule 81 (factor -> CHAR_LITERAL .)
    ^               reduce using rule 81 (factor -> CHAR_LITERAL .)
    %               reduce using rule 81 (factor -> CHAR_LITERAL .)
    /               reduce using rule 81 (factor -> CHAR_LITERAL .)
    *               reduce using rule 81 (factor -> CHAR_LITERAL .)
    -               reduce using rule 81 (factor -> CHAR_LITERAL .)
    +               reduce using rule 81 (factor -> CHAR_LITERAL .)
    GE              reduce using rule 81 (factor -> CHAR_LITERAL .)
    GT              reduce using rule 81 (factor -> CHAR_LITERAL .)
    LE              reduce using rule 81 (factor -> CHAR_LITERAL .)
    LT              reduce using rule 81 (factor -> CHAR_LITERAL .)
    NEQ             reduce using rule 81 (factor -> CHAR_LITERAL .)
    EQ              reduce using rule 81 (factor -> CHAR_LITERAL .)
    LAND            reduce using rule 81 (factor -> CHAR_LITERAL .)
    LOR             reduce using rule 81 (factor -> CHAR_LITERAL .)
    ;               reduce using rule 81 (factor -> CHAR_LITERAL .)
    ]               reduce using rule 81 (factor -> CHAR_LITERAL .)
    ,               reduce using rule 81 (factor -> CHAR_LITERAL .)
    }               reduce using rule 81 (factor -> CHAR_LITERAL .)
    )               reduce using rule 81 (factor -> CHAR_LITERAL .)


state 53

    (82) factor -> FLOAT_LITERAL .
    DEC             reduce using rule 82 (factor -> FLOAT_LITERAL .)
    INC             reduce using rule 82 (factor -> FLOAT_LITERAL .)
    ^               reduce using rule 82 (factor -> FLOAT_LITERAL .)
    %               reduce using rule 82 (factor -> FLOAT_LITERAL .)
    /               reduce using rule 82 (factor -> FLOAT_LITERAL .)
    *               reduce using rule 82 (factor -> FLOAT_LITERAL .)
    -               reduce using rule 82 (factor -> FLOAT_LITERAL .)
    +               reduce using rule 82 (factor -> FLOAT_LITERAL .)
    GE              reduce using rule 82 (factor -> FLOAT_LITERAL .)
    GT              reduce using rule 82 (factor -> FLOAT_LITERAL .)
    LE              reduce using rule 82 (factor -> FLOAT_LITERAL .)
    LT              reduce using rule 82 (factor -> FLOAT_LITERAL .)
    NEQ             reduce using rule 82 (factor -> FLOAT_LITERAL .)
    EQ              reduce using rule 82 (factor -> FLOAT_LITERAL .)
    LAND            reduce using rule 82 (factor -> FLOAT_LITERAL .)
    LOR             reduce using rule 82 (factor -> FLOAT_LITERAL .)
    ;               reduce using rule 82 (factor -> FLOAT_LITERAL .)
    ]               reduce using rule 82 (factor -> FLOAT_LITERAL .)
    ,               reduce using rule 82 (factor -> FLOAT_LITERAL .)
    }               reduce using rule 82 (factor -> FLOAT_LITERAL .)
    )               reduce using rule 82 (factor -> FLOAT_LITERAL .)


state 54

    (83) factor -> INTEGER_LITERAL .
    DEC             reduce using rule 83 (factor -> INTEGER_LITERAL .)
    INC             reduce using rule 83 (factor -> INTEGER_LITERAL .)
    ^               reduce using rule 83 (factor -> INTEGER_LITERAL .)
    %               reduce using rule 83 (factor -> INTEGER_LITERAL .)
    /               reduce using rule 83 (factor -> INTEGER_LITERAL .)
    *               reduce using rule 83 (factor -> INTEGER_LITERAL .)
    -               reduce using rule 83 (factor -> INTEGER_LITERAL .)
    +               reduce using rule 83 (factor -> INTEGER_LITERAL .)
    GE              reduce using rule 83 (factor -> INTEGER_LITERAL .)
    GT              reduce using rule 83 (factor -> INTEGER_LITERAL .)
    LE              reduce using rule 83 (factor -> INTEGER_LITERAL .)
    LT              reduce using rule 83 (factor -> INTEGER_LITERAL .)
    NEQ             reduce using rule 83 (factor -> INTEGER_LITERAL .)
    EQ              reduce using rule 83 (factor -> INTEGER_LITERAL .)
    LAND            reduce using rule 83 (factor -> INTEGER_LITERAL .)
    LOR             reduce using rule 83 (factor -> INTEGER_LITERAL .)
    ;               reduce using rule 83 (factor -> INTEGER_LITERAL .)
    ]               reduce using rule 83 (factor -> INTEGER_LITERAL .)
    ,               reduce using rule 83 (factor -> INTEGER_LITERAL .)
    }               reduce using rule 83 (factor -> INTEGER_LITERAL .)
    )               reduce using rule 83 (factor -> INTEGER_LITERAL .)


state 55

    (95) type_func -> FUNCTION type_array_sized ( . opt_param_list )
    (97) opt_param_list -> . param_list
    (98) opt_param_list -> . empty
    (99) param_list -> . param
    (100) param_list -> . param_list , param
    (104) empty -> .
    (101) param -> . ID : type_array_sized
    (102) param -> . ID : type_array
    (103) param -> . ID : type_simple
    )               reduce using rule 104 (empty -> .)
    ID              shift and go to state 114

    opt_param_list                 shift and go to state 110
    param_list                     shift and go to state 111
    empty                          shift and go to state 112
    param                          shift and go to state 113

state 56

    (96) type_func -> FUNCTION type_simple ( . opt_param_list )
    (97) opt_param_list -> . param_list
    (98) opt_param_list -> . empty
    (99) param_list -> . param
    (100) param_list -> . param_list , param
    (104) empty -> .
    (101) param -> . ID : type_array_sized
    (102) param -> . ID : type_array
    (103) param -> . ID : type_simple
    )               reduce using rule 104 (empty -> .)
    ID              shift and go to state 114

    opt_param_list                 shift and go to state 115
    param_list                     shift and go to state 111
    empty                          shift and go to state 112
    param                          shift and go to state 113

state 57

    (93) type_array_sized -> ARRAY index type_array_sized .
    ;               reduce using rule 93 (type_array_sized -> ARRAY index type_array_sized .)
    ASSIGN          reduce using rule 93 (type_array_sized -> ARRAY index type_array_sized .)
    (               reduce using rule 93 (type_array_sized -> ARRAY index type_array_sized .)
    ,               reduce using rule 93 (type_array_sized -> ARRAY index type_array_sized .)
    )               reduce using rule 93 (type_array_sized -> ARRAY index type_array_sized .)


state 58

    (94) type_array_sized -> ARRAY index type_simple .
    ;               reduce using rule 94 (type_array_sized -> ARRAY index type_simple .)
    ASSIGN          reduce using rule 94 (type_array_sized -> ARRAY index type_simple .)
    (               reduce using rule 94 (type_array_sized -> ARRAY index type_simple .)
    ,               reduce using rule 94 (type_array_sized -> ARRAY index type_simple .)
    )               reduce using rule 94 (type_array_sized -> ARRAY index type_simple .)


state 59

    (77) index -> [ expr . ]
    ]               shift and go to state 116


state 60

    (35) block_stmt -> { . stmt_list }
    (13) stmt_list -> . stmt
    (14) stmt_list -> . stmt stmt_list
    (15) stmt -> . closed_stmt
    (16) stmt -> . open_stmt
    (17) closed_stmt -> . simple_stmt
    (18) closed_stmt -> . for_stmt_closed
    (19) closed_stmt -> . if_stmt_closed
    (20) open_stmt -> . for_stmt_open
    (21) open_stmt -> . if_stmt_open
    (29) simple_stmt -> . expr ;
    (30) simple_stmt -> . block_stmt
    (31) simple_stmt -> . return_stmt
    (32) simple_stmt -> . print_stmt
    (28) for_stmt_closed -> . for_header closed_stmt
    (23) if_stmt_closed -> . if_cond closed_stmt ELSE closed_stmt
    (27) for_stmt_open -> . for_header open_stmt
    (24) if_stmt_open -> . if_cond closed_stmt ELSE if_stmt_open
    (25) if_stmt_open -> . if_cond stmt
    (42) expr -> . expr1
    (35) block_stmt -> . { stmt_list }
    (34) return_stmt -> . RETURN opt_expr ;
    (33) print_stmt -> . PRINT opt_expr_list ;
    (26) for_header -> . FOR ( opt_expr ; opt_expr ; opt_expr )
    (22) if_cond -> . IF ( opt_expr )
    (43) expr1 -> . expr2
    (44) expr1 -> . lval ASSIGN expr1
    (47) expr2 -> . expr3
    (48) expr2 -> . expr2 LOR expr3
    (45) lval -> . ID index
    (46) lval -> . ID
    (49) expr3 -> . expr4
    (50) expr3 -> . expr3 LAND expr4
    (51) expr4 -> . expr5
    (52) expr4 -> . expr4 GE expr5
    (53) expr4 -> . expr4 GT expr5
    (54) expr4 -> . expr4 LE expr5
    (55) expr4 -> . expr4 LT expr5
    (56) expr4 -> . expr4 NEQ expr5
    (57) expr4 -> . expr4 EQ expr5
    (58) expr5 -> . expr6
    (59) expr5 -> . expr5 - expr6
    (60) expr5 -> . expr5 + expr6
    (61) expr6 -> . expr7
    (62) expr6 -> . expr6 % expr7
    (63) expr6 -> . expr6 / expr7
    (64) expr6 -> . expr6 * expr7
    (65) expr7 -> . expr8
    (66) expr7 -> . expr7 ^ expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    {               shift and go to state 60
    RETURN          shift and go to state 78
    PRINT           shift and go to state 79
    FOR             shift and go to state 80
    IF              shift and go to state 81
    ID              shift and go to state 32
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    stmt_list                      shift and go to state 117
    stmt                           shift and go to state 64
    closed_stmt                    shift and go to state 65
    open_stmt                      shift and go to state 66
    simple_stmt                    shift and go to state 67
    for_stmt_closed                shift and go to state 68
    if_stmt_closed                 shift and go to state 69
    for_stmt_open                  shift and go to state 70
    if_stmt_open                   shift and go to state 71
    expr                           shift and go to state 72
    block_stmt                     shift and go to state 73
    return_stmt                    shift and go to state 74
    print_stmt                     shift and go to state 75
    for_header                     shift and go to state 76
    if_cond                        shift and go to state 77
    expr1                          shift and go to state 34
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 61

    (8) decl_init -> ID : type_func ASSIGN { opt_stmt_list . }
    }               shift and go to state 118


state 62

    (11) opt_stmt_list -> empty .
    }               reduce using rule 11 (opt_stmt_list -> empty .)


state 63

    (12) opt_stmt_list -> stmt_list .
    }               reduce using rule 12 (opt_stmt_list -> stmt_list .)


state 64

    (13) stmt_list -> stmt .
    (14) stmt_list -> stmt . stmt_list
    (13) stmt_list -> . stmt
    (14) stmt_list -> . stmt stmt_list
    (15) stmt -> . closed_stmt
    (16) stmt -> . open_stmt
    (17) closed_stmt -> . simple_stmt
    (18) closed_stmt -> . for_stmt_closed
    (19) closed_stmt -> . if_stmt_closed
    (20) open_stmt -> . for_stmt_open
    (21) open_stmt -> . if_stmt_open
    (29) simple_stmt -> . expr ;
    (30) simple_stmt -> . block_stmt
    (31) simple_stmt -> . return_stmt
    (32) simple_stmt -> . print_stmt
    (28) for_stmt_closed -> . for_header closed_stmt
    (23) if_stmt_closed -> . if_cond closed_stmt ELSE closed_stmt
    (27) for_stmt_open -> . for_header open_stmt
    (24) if_stmt_open -> . if_cond closed_stmt ELSE if_stmt_open
    (25) if_stmt_open -> . if_cond stmt
    (42) expr -> . expr1
    (35) block_stmt -> . { stmt_list }
    (34) return_stmt -> . RETURN opt_expr ;
    (33) print_stmt -> . PRINT opt_expr_list ;
    (26) for_header -> . FOR ( opt_expr ; opt_expr ; opt_expr )
    (22) if_cond -> . IF ( opt_expr )
    (43) expr1 -> . expr2
    (44) expr1 -> . lval ASSIGN expr1
    (47) expr2 -> . expr3
    (48) expr2 -> . expr2 LOR expr3
    (45) lval -> . ID index
    (46) lval -> . ID
    (49) expr3 -> . expr4
    (50) expr3 -> . expr3 LAND expr4
    (51) expr4 -> . expr5
    (52) expr4 -> . expr4 GE expr5
    (53) expr4 -> . expr4 GT expr5
    (54) expr4 -> . expr4 LE expr5
    (55) expr4 -> . expr4 LT expr5
    (56) expr4 -> . expr4 NEQ expr5
    (57) expr4 -> . expr4 EQ expr5
    (58) expr5 -> . expr6
    (59) expr5 -> . expr5 - expr6
    (60) expr5 -> . expr5 + expr6
    (61) expr6 -> . expr7
    (62) expr6 -> . expr6 % expr7
    (63) expr6 -> . expr6 / expr7
    (64) expr6 -> . expr6 * expr7
    (65) expr7 -> . expr8
    (66) expr7 -> . expr7 ^ expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    }               reduce using rule 13 (stmt_list -> stmt .)
    {               shift and go to state 60
    RETURN          shift and go to state 78
    PRINT           shift and go to state 79
    FOR             shift and go to state 80
    IF              shift and go to state 81
    ID              shift and go to state 32
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    stmt                           shift and go to state 64
    stmt_list                      shift and go to state 119
    closed_stmt                    shift and go to state 65
    open_stmt                      shift and go to state 66
    simple_stmt                    shift and go to state 67
    for_stmt_closed                shift and go to state 68
    if_stmt_closed                 shift and go to state 69
    for_stmt_open                  shift and go to state 70
    if_stmt_open                   shift and go to state 71
    expr                           shift and go to state 72
    block_stmt                     shift and go to state 73
    return_stmt                    shift and go to state 74
    print_stmt                     shift and go to state 75
    for_header                     shift and go to state 76
    if_cond                        shift and go to state 77
    expr1                          shift and go to state 34
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 65

    (15) stmt -> closed_stmt .
    {               reduce using rule 15 (stmt -> closed_stmt .)
    RETURN          reduce using rule 15 (stmt -> closed_stmt .)
    PRINT           reduce using rule 15 (stmt -> closed_stmt .)
    FOR             reduce using rule 15 (stmt -> closed_stmt .)
    IF              reduce using rule 15 (stmt -> closed_stmt .)
    ID              reduce using rule 15 (stmt -> closed_stmt .)
    !               reduce using rule 15 (stmt -> closed_stmt .)
    -               reduce using rule 15 (stmt -> closed_stmt .)
    (               reduce using rule 15 (stmt -> closed_stmt .)
    FALSE           reduce using rule 15 (stmt -> closed_stmt .)
    TRUE            reduce using rule 15 (stmt -> closed_stmt .)
    STRING_LITERAL  reduce using rule 15 (stmt -> closed_stmt .)
    CHAR_LITERAL    reduce using rule 15 (stmt -> closed_stmt .)
    FLOAT_LITERAL   reduce using rule 15 (stmt -> closed_stmt .)
    INTEGER_LITERAL reduce using rule 15 (stmt -> closed_stmt .)
    }               reduce using rule 15 (stmt -> closed_stmt .)


state 66

    (16) stmt -> open_stmt .
    {               reduce using rule 16 (stmt -> open_stmt .)
    RETURN          reduce using rule 16 (stmt -> open_stmt .)
    PRINT           reduce using rule 16 (stmt -> open_stmt .)
    FOR             reduce using rule 16 (stmt -> open_stmt .)
    IF              reduce using rule 16 (stmt -> open_stmt .)
    ID              reduce using rule 16 (stmt -> open_stmt .)
    !               reduce using rule 16 (stmt -> open_stmt .)
    -               reduce using rule 16 (stmt -> open_stmt .)
    (               reduce using rule 16 (stmt -> open_stmt .)
    FALSE           reduce using rule 16 (stmt -> open_stmt .)
    TRUE            reduce using rule 16 (stmt -> open_stmt .)
    STRING_LITERAL  reduce using rule 16 (stmt -> open_stmt .)
    CHAR_LITERAL    reduce using rule 16 (stmt -> open_stmt .)
    FLOAT_LITERAL   reduce using rule 16 (stmt -> open_stmt .)
    INTEGER_LITERAL reduce using rule 16 (stmt -> open_stmt .)
    }               reduce using rule 16 (stmt -> open_stmt .)


state 67

    (17) closed_stmt -> simple_stmt .
    {               reduce using rule 17 (closed_stmt -> simple_stmt .)
    RETURN          reduce using rule 17 (closed_stmt -> simple_stmt .)
    PRINT           reduce using rule 17 (closed_stmt -> simple_stmt .)
    FOR             reduce using rule 17 (closed_stmt -> simple_stmt .)
    IF              reduce using rule 17 (closed_stmt -> simple_stmt .)
    ID              reduce using rule 17 (closed_stmt -> simple_stmt .)
    !               reduce using rule 17 (closed_stmt -> simple_stmt .)
    -               reduce using rule 17 (closed_stmt -> simple_stmt .)
    (               reduce using rule 17 (closed_stmt -> simple_stmt .)
    FALSE           reduce using rule 17 (closed_stmt -> simple_stmt .)
    TRUE            reduce using rule 17 (closed_stmt -> simple_stmt .)
    STRING_LITERAL  reduce using rule 17 (closed_stmt -> simple_stmt .)
    CHAR_LITERAL    reduce using rule 17 (closed_stmt -> simple_stmt .)
    FLOAT_LITERAL   reduce using rule 17 (closed_stmt -> simple_stmt .)
    INTEGER_LITERAL reduce using rule 17 (closed_stmt -> simple_stmt .)
    }               reduce using rule 17 (closed_stmt -> simple_stmt .)
    ELSE            reduce using rule 17 (closed_stmt -> simple_stmt .)


state 68

    (18) closed_stmt -> for_stmt_closed .
    {               reduce using rule 18 (closed_stmt -> for_stmt_closed .)
    RETURN          reduce using rule 18 (closed_stmt -> for_stmt_closed .)
    PRINT           reduce using rule 18 (closed_stmt -> for_stmt_closed .)
    FOR             reduce using rule 18 (closed_stmt -> for_stmt_closed .)
    IF              reduce using rule 18 (closed_stmt -> for_stmt_closed .)
    ID              reduce using rule 18 (closed_stmt -> for_stmt_closed .)
    !               reduce using rule 18 (closed_stmt -> for_stmt_closed .)
    -               reduce using rule 18 (closed_stmt -> for_stmt_closed .)
    (               reduce using rule 18 (closed_stmt -> for_stmt_closed .)
    FALSE           reduce using rule 18 (closed_stmt -> for_stmt_closed .)
    TRUE            reduce using rule 18 (closed_stmt -> for_stmt_closed .)
    STRING_LITERAL  reduce using rule 18 (closed_stmt -> for_stmt_closed .)
    CHAR_LITERAL    reduce using rule 18 (closed_stmt -> for_stmt_closed .)
    FLOAT_LITERAL   reduce using rule 18 (closed_stmt -> for_stmt_closed .)
    INTEGER_LITERAL reduce using rule 18 (closed_stmt -> for_stmt_closed .)
    }               reduce using rule 18 (closed_stmt -> for_stmt_closed .)
    ELSE            reduce using rule 18 (closed_stmt -> for_stmt_closed .)


state 69

    (19) closed_stmt -> if_stmt_closed .
    {               reduce using rule 19 (closed_stmt -> if_stmt_closed .)
    RETURN          reduce using rule 19 (closed_stmt -> if_stmt_closed .)
    PRINT           reduce using rule 19 (closed_stmt -> if_stmt_closed .)
    FOR             reduce using rule 19 (closed_stmt -> if_stmt_closed .)
    IF              reduce using rule 19 (closed_stmt -> if_stmt_closed .)
    ID              reduce using rule 19 (closed_stmt -> if_stmt_closed .)
    !               reduce using rule 19 (closed_stmt -> if_stmt_closed .)
    -               reduce using rule 19 (closed_stmt -> if_stmt_closed .)
    (               reduce using rule 19 (closed_stmt -> if_stmt_closed .)
    FALSE           reduce using rule 19 (closed_stmt -> if_stmt_closed .)
    TRUE            reduce using rule 19 (closed_stmt -> if_stmt_closed .)
    STRING_LITERAL  reduce using rule 19 (closed_stmt -> if_stmt_closed .)
    CHAR_LITERAL    reduce using rule 19 (closed_stmt -> if_stmt_closed .)
    FLOAT_LITERAL   reduce using rule 19 (closed_stmt -> if_stmt_closed .)
    INTEGER_LITERAL reduce using rule 19 (closed_stmt -> if_stmt_closed .)
    }               reduce using rule 19 (closed_stmt -> if_stmt_closed .)
    ELSE            reduce using rule 19 (closed_stmt -> if_stmt_closed .)


state 70

    (20) open_stmt -> for_stmt_open .
    {               reduce using rule 20 (open_stmt -> for_stmt_open .)
    RETURN          reduce using rule 20 (open_stmt -> for_stmt_open .)
    PRINT           reduce using rule 20 (open_stmt -> for_stmt_open .)
    FOR             reduce using rule 20 (open_stmt -> for_stmt_open .)
    IF              reduce using rule 20 (open_stmt -> for_stmt_open .)
    ID              reduce using rule 20 (open_stmt -> for_stmt_open .)
    !               reduce using rule 20 (open_stmt -> for_stmt_open .)
    -               reduce using rule 20 (open_stmt -> for_stmt_open .)
    (               reduce using rule 20 (open_stmt -> for_stmt_open .)
    FALSE           reduce using rule 20 (open_stmt -> for_stmt_open .)
    TRUE            reduce using rule 20 (open_stmt -> for_stmt_open .)
    STRING_LITERAL  reduce using rule 20 (open_stmt -> for_stmt_open .)
    CHAR_LITERAL    reduce using rule 20 (open_stmt -> for_stmt_open .)
    FLOAT_LITERAL   reduce using rule 20 (open_stmt -> for_stmt_open .)
    INTEGER_LITERAL reduce using rule 20 (open_stmt -> for_stmt_open .)
    }               reduce using rule 20 (open_stmt -> for_stmt_open .)


state 71

    (21) open_stmt -> if_stmt_open .
    {               reduce using rule 21 (open_stmt -> if_stmt_open .)
    RETURN          reduce using rule 21 (open_stmt -> if_stmt_open .)
    PRINT           reduce using rule 21 (open_stmt -> if_stmt_open .)
    FOR             reduce using rule 21 (open_stmt -> if_stmt_open .)
    IF              reduce using rule 21 (open_stmt -> if_stmt_open .)
    ID              reduce using rule 21 (open_stmt -> if_stmt_open .)
    !               reduce using rule 21 (open_stmt -> if_stmt_open .)
    -               reduce using rule 21 (open_stmt -> if_stmt_open .)
    (               reduce using rule 21 (open_stmt -> if_stmt_open .)
    FALSE           reduce using rule 21 (open_stmt -> if_stmt_open .)
    TRUE            reduce using rule 21 (open_stmt -> if_stmt_open .)
    STRING_LITERAL  reduce using rule 21 (open_stmt -> if_stmt_open .)
    CHAR_LITERAL    reduce using rule 21 (open_stmt -> if_stmt_open .)
    FLOAT_LITERAL   reduce using rule 21 (open_stmt -> if_stmt_open .)
    INTEGER_LITERAL reduce using rule 21 (open_stmt -> if_stmt_open .)
    }               reduce using rule 21 (open_stmt -> if_stmt_open .)


state 72

    (29) simple_stmt -> expr . ;
    ;               shift and go to state 120


state 73

    (30) simple_stmt -> block_stmt .
    {               reduce using rule 30 (simple_stmt -> block_stmt .)
    RETURN          reduce using rule 30 (simple_stmt -> block_stmt .)
    PRINT           reduce using rule 30 (simple_stmt -> block_stmt .)
    FOR             reduce using rule 30 (simple_stmt -> block_stmt .)
    IF              reduce using rule 30 (simple_stmt -> block_stmt .)
    ID              reduce using rule 30 (simple_stmt -> block_stmt .)
    !               reduce using rule 30 (simple_stmt -> block_stmt .)
    -               reduce using rule 30 (simple_stmt -> block_stmt .)
    (               reduce using rule 30 (simple_stmt -> block_stmt .)
    FALSE           reduce using rule 30 (simple_stmt -> block_stmt .)
    TRUE            reduce using rule 30 (simple_stmt -> block_stmt .)
    STRING_LITERAL  reduce using rule 30 (simple_stmt -> block_stmt .)
    CHAR_LITERAL    reduce using rule 30 (simple_stmt -> block_stmt .)
    FLOAT_LITERAL   reduce using rule 30 (simple_stmt -> block_stmt .)
    INTEGER_LITERAL reduce using rule 30 (simple_stmt -> block_stmt .)
    }               reduce using rule 30 (simple_stmt -> block_stmt .)
    ELSE            reduce using rule 30 (simple_stmt -> block_stmt .)


state 74

    (31) simple_stmt -> return_stmt .
    {               reduce using rule 31 (simple_stmt -> return_stmt .)
    RETURN          reduce using rule 31 (simple_stmt -> return_stmt .)
    PRINT           reduce using rule 31 (simple_stmt -> return_stmt .)
    FOR             reduce using rule 31 (simple_stmt -> return_stmt .)
    IF              reduce using rule 31 (simple_stmt -> return_stmt .)
    ID              reduce using rule 31 (simple_stmt -> return_stmt .)
    !               reduce using rule 31 (simple_stmt -> return_stmt .)
    -               reduce using rule 31 (simple_stmt -> return_stmt .)
    (               reduce using rule 31 (simple_stmt -> return_stmt .)
    FALSE           reduce using rule 31 (simple_stmt -> return_stmt .)
    TRUE            reduce using rule 31 (simple_stmt -> return_stmt .)
    STRING_LITERAL  reduce using rule 31 (simple_stmt -> return_stmt .)
    CHAR_LITERAL    reduce using rule 31 (simple_stmt -> return_stmt .)
    FLOAT_LITERAL   reduce using rule 31 (simple_stmt -> return_stmt .)
    INTEGER_LITERAL reduce using rule 31 (simple_stmt -> return_stmt .)
    }               reduce using rule 31 (simple_stmt -> return_stmt .)
    ELSE            reduce using rule 31 (simple_stmt -> return_stmt .)


state 75

    (32) simple_stmt -> print_stmt .
    {               reduce using rule 32 (simple_stmt -> print_stmt .)
    RETURN          reduce using rule 32 (simple_stmt -> print_stmt .)
    PRINT           reduce using rule 32 (simple_stmt -> print_stmt .)
    FOR             reduce using rule 32 (simple_stmt -> print_stmt .)
    IF              reduce using rule 32 (simple_stmt -> print_stmt .)
    ID              reduce using rule 32 (simple_stmt -> print_stmt .)
    !               reduce using rule 32 (simple_stmt -> print_stmt .)
    -               reduce using rule 32 (simple_stmt -> print_stmt .)
    (               reduce using rule 32 (simple_stmt -> print_stmt .)
    FALSE           reduce using rule 32 (simple_stmt -> print_stmt .)
    TRUE            reduce using rule 32 (simple_stmt -> print_stmt .)
    STRING_LITERAL  reduce using rule 32 (simple_stmt -> print_stmt .)
    CHAR_LITERAL    reduce using rule 32 (simple_stmt -> print_stmt .)
    FLOAT_LITERAL   reduce using rule 32 (simple_stmt -> print_stmt .)
    INTEGER_LITERAL reduce using rule 32 (simple_stmt -> print_stmt .)
    }               reduce using rule 32 (simple_stmt -> print_stmt .)
    ELSE            reduce using rule 32 (simple_stmt -> print_stmt .)


state 76

    (28) for_stmt_closed -> for_header . closed_stmt
    (27) for_stmt_open -> for_header . open_stmt
    (17) closed_stmt -> . simple_stmt
    (18) closed_stmt -> . for_stmt_closed
    (19) closed_stmt -> . if_stmt_closed
    (20) open_stmt -> . for_stmt_open
    (21) open_stmt -> . if_stmt_open
    (29) simple_stmt -> . expr ;
    (30) simple_stmt -> . block_stmt
    (31) simple_stmt -> . return_stmt
    (32) simple_stmt -> . print_stmt
    (28) for_stmt_closed -> . for_header closed_stmt
    (23) if_stmt_closed -> . if_cond closed_stmt ELSE closed_stmt
    (27) for_stmt_open -> . for_header open_stmt
    (24) if_stmt_open -> . if_cond closed_stmt ELSE if_stmt_open
    (25) if_stmt_open -> . if_cond stmt
    (42) expr -> . expr1
    (35) block_stmt -> . { stmt_list }
    (34) return_stmt -> . RETURN opt_expr ;
    (33) print_stmt -> . PRINT opt_expr_list ;
    (26) for_header -> . FOR ( opt_expr ; opt_expr ; opt_expr )
    (22) if_cond -> . IF ( opt_expr )
    (43) expr1 -> . expr2
    (44) expr1 -> . lval ASSIGN expr1
    (47) expr2 -> . expr3
    (48) expr2 -> . expr2 LOR expr3
    (45) lval -> . ID index
    (46) lval -> . ID
    (49) expr3 -> . expr4
    (50) expr3 -> . expr3 LAND expr4
    (51) expr4 -> . expr5
    (52) expr4 -> . expr4 GE expr5
    (53) expr4 -> . expr4 GT expr5
    (54) expr4 -> . expr4 LE expr5
    (55) expr4 -> . expr4 LT expr5
    (56) expr4 -> . expr4 NEQ expr5
    (57) expr4 -> . expr4 EQ expr5
    (58) expr5 -> . expr6
    (59) expr5 -> . expr5 - expr6
    (60) expr5 -> . expr5 + expr6
    (61) expr6 -> . expr7
    (62) expr6 -> . expr6 % expr7
    (63) expr6 -> . expr6 / expr7
    (64) expr6 -> . expr6 * expr7
    (65) expr7 -> . expr8
    (66) expr7 -> . expr7 ^ expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    {               shift and go to state 60
    RETURN          shift and go to state 78
    PRINT           shift and go to state 79
    FOR             shift and go to state 80
    IF              shift and go to state 81
    ID              shift and go to state 32
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    for_header                     shift and go to state 76
    closed_stmt                    shift and go to state 121
    open_stmt                      shift and go to state 122
    simple_stmt                    shift and go to state 67
    for_stmt_closed                shift and go to state 68
    if_stmt_closed                 shift and go to state 69
    for_stmt_open                  shift and go to state 70
    if_stmt_open                   shift and go to state 71
    expr                           shift and go to state 72
    block_stmt                     shift and go to state 73
    return_stmt                    shift and go to state 74
    print_stmt                     shift and go to state 75
    if_cond                        shift and go to state 77
    expr1                          shift and go to state 34
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 77

    (23) if_stmt_closed -> if_cond . closed_stmt ELSE closed_stmt
    (24) if_stmt_open -> if_cond . closed_stmt ELSE if_stmt_open
    (25) if_stmt_open -> if_cond . stmt
    (17) closed_stmt -> . simple_stmt
    (18) closed_stmt -> . for_stmt_closed
    (19) closed_stmt -> . if_stmt_closed
    (15) stmt -> . closed_stmt
    (16) stmt -> . open_stmt
    (29) simple_stmt -> . expr ;
    (30) simple_stmt -> . block_stmt
    (31) simple_stmt -> . return_stmt
    (32) simple_stmt -> . print_stmt
    (28) for_stmt_closed -> . for_header closed_stmt
    (23) if_stmt_closed -> . if_cond closed_stmt ELSE closed_stmt
    (20) open_stmt -> . for_stmt_open
    (21) open_stmt -> . if_stmt_open
    (42) expr -> . expr1
    (35) block_stmt -> . { stmt_list }
    (34) return_stmt -> . RETURN opt_expr ;
    (33) print_stmt -> . PRINT opt_expr_list ;
    (26) for_header -> . FOR ( opt_expr ; opt_expr ; opt_expr )
    (22) if_cond -> . IF ( opt_expr )
    (27) for_stmt_open -> . for_header open_stmt
    (24) if_stmt_open -> . if_cond closed_stmt ELSE if_stmt_open
    (25) if_stmt_open -> . if_cond stmt
    (43) expr1 -> . expr2
    (44) expr1 -> . lval ASSIGN expr1
    (47) expr2 -> . expr3
    (48) expr2 -> . expr2 LOR expr3
    (45) lval -> . ID index
    (46) lval -> . ID
    (49) expr3 -> . expr4
    (50) expr3 -> . expr3 LAND expr4
    (51) expr4 -> . expr5
    (52) expr4 -> . expr4 GE expr5
    (53) expr4 -> . expr4 GT expr5
    (54) expr4 -> . expr4 LE expr5
    (55) expr4 -> . expr4 LT expr5
    (56) expr4 -> . expr4 NEQ expr5
    (57) expr4 -> . expr4 EQ expr5
    (58) expr5 -> . expr6
    (59) expr5 -> . expr5 - expr6
    (60) expr5 -> . expr5 + expr6
    (61) expr6 -> . expr7
    (62) expr6 -> . expr6 % expr7
    (63) expr6 -> . expr6 / expr7
    (64) expr6 -> . expr6 * expr7
    (65) expr7 -> . expr8
    (66) expr7 -> . expr7 ^ expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    {               shift and go to state 60
    RETURN          shift and go to state 78
    PRINT           shift and go to state 79
    FOR             shift and go to state 80
    IF              shift and go to state 81
    ID              shift and go to state 32
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    if_cond                        shift and go to state 77
    closed_stmt                    shift and go to state 123
    if_stmt_open                   shift and go to state 71
    stmt                           shift and go to state 124
    simple_stmt                    shift and go to state 67
    for_stmt_closed                shift and go to state 68
    if_stmt_closed                 shift and go to state 69
    open_stmt                      shift and go to state 66
    expr                           shift and go to state 72
    block_stmt                     shift and go to state 73
    return_stmt                    shift and go to state 74
    print_stmt                     shift and go to state 75
    for_header                     shift and go to state 76
    for_stmt_open                  shift and go to state 70
    expr1                          shift and go to state 34
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 78

    (34) return_stmt -> RETURN . opt_expr ;
    (40) opt_expr -> . expr
    (41) opt_expr -> . empty
    (42) expr -> . expr1
    (104) empty -> .
    (43) expr1 -> . expr2
    (44) expr1 -> . lval ASSIGN expr1
    (47) expr2 -> . expr3
    (48) expr2 -> . expr2 LOR expr3
    (45) lval -> . ID index
    (46) lval -> . ID
    (49) expr3 -> . expr4
    (50) expr3 -> . expr3 LAND expr4
    (51) expr4 -> . expr5
    (52) expr4 -> . expr4 GE expr5
    (53) expr4 -> . expr4 GT expr5
    (54) expr4 -> . expr4 LE expr5
    (55) expr4 -> . expr4 LT expr5
    (56) expr4 -> . expr4 NEQ expr5
    (57) expr4 -> . expr4 EQ expr5
    (58) expr5 -> . expr6
    (59) expr5 -> . expr5 - expr6
    (60) expr5 -> . expr5 + expr6
    (61) expr6 -> . expr7
    (62) expr6 -> . expr6 % expr7
    (63) expr6 -> . expr6 / expr7
    (64) expr6 -> . expr6 * expr7
    (65) expr7 -> . expr8
    (66) expr7 -> . expr7 ^ expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    ;               reduce using rule 104 (empty -> .)
    ID              shift and go to state 32
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    opt_expr                       shift and go to state 125
    expr                           shift and go to state 126
    empty                          shift and go to state 127
    expr1                          shift and go to state 34
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 79

    (33) print_stmt -> PRINT . opt_expr_list ;
    (36) opt_expr_list -> . expr_list
    (37) opt_expr_list -> . empty
    (38) expr_list -> . expr
    (39) expr_list -> . expr , expr_list
    (104) empty -> .
    (42) expr -> . expr1
    (43) expr1 -> . expr2
    (44) expr1 -> . lval ASSIGN expr1
    (47) expr2 -> . expr3
    (48) expr2 -> . expr2 LOR expr3
    (45) lval -> . ID index
    (46) lval -> . ID
    (49) expr3 -> . expr4
    (50) expr3 -> . expr3 LAND expr4
    (51) expr4 -> . expr5
    (52) expr4 -> . expr4 GE expr5
    (53) expr4 -> . expr4 GT expr5
    (54) expr4 -> . expr4 LE expr5
    (55) expr4 -> . expr4 LT expr5
    (56) expr4 -> . expr4 NEQ expr5
    (57) expr4 -> . expr4 EQ expr5
    (58) expr5 -> . expr6
    (59) expr5 -> . expr5 - expr6
    (60) expr5 -> . expr5 + expr6
    (61) expr6 -> . expr7
    (62) expr6 -> . expr6 % expr7
    (63) expr6 -> . expr6 / expr7
    (64) expr6 -> . expr6 * expr7
    (65) expr7 -> . expr8
    (66) expr7 -> . expr7 ^ expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    ;               reduce using rule 104 (empty -> .)
    ID              shift and go to state 32
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    opt_expr_list                  shift and go to state 128
    expr_list                      shift and go to state 83
    empty                          shift and go to state 84
    expr                           shift and go to state 85
    expr1                          shift and go to state 34
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 80

    (26) for_header -> FOR . ( opt_expr ; opt_expr ; opt_expr )
    (               shift and go to state 129


state 81

    (22) if_cond -> IF . ( opt_expr )
    (               shift and go to state 130


state 82

    (9) decl_init -> ID : type_array_sized ASSIGN { opt_expr_list . } ;
    }               shift and go to state 131


state 83

    (36) opt_expr_list -> expr_list .
    }               reduce using rule 36 (opt_expr_list -> expr_list .)
    ;               reduce using rule 36 (opt_expr_list -> expr_list .)
    )               reduce using rule 36 (opt_expr_list -> expr_list .)


state 84

    (37) opt_expr_list -> empty .
    }               reduce using rule 37 (opt_expr_list -> empty .)
    ;               reduce using rule 37 (opt_expr_list -> empty .)
    )               reduce using rule 37 (opt_expr_list -> empty .)


state 85

    (38) expr_list -> expr .
    (39) expr_list -> expr . , expr_list
    }               reduce using rule 38 (expr_list -> expr .)
    ;               reduce using rule 38 (expr_list -> expr .)
    )               reduce using rule 38 (expr_list -> expr .)
    ,               shift and go to state 132


state 86

    (45) lval -> ID index .
    (74) group -> ID index .
    ASSIGN          reduce using rule 45 (lval -> ID index .)
    DEC             reduce using rule 74 (group -> ID index .)
    INC             reduce using rule 74 (group -> ID index .)
    ^               reduce using rule 74 (group -> ID index .)
    %               reduce using rule 74 (group -> ID index .)
    /               reduce using rule 74 (group -> ID index .)
    *               reduce using rule 74 (group -> ID index .)
    -               reduce using rule 74 (group -> ID index .)
    +               reduce using rule 74 (group -> ID index .)
    GE              reduce using rule 74 (group -> ID index .)
    GT              reduce using rule 74 (group -> ID index .)
    LE              reduce using rule 74 (group -> ID index .)
    LT              reduce using rule 74 (group -> ID index .)
    NEQ             reduce using rule 74 (group -> ID index .)
    EQ              reduce using rule 74 (group -> ID index .)
    LAND            reduce using rule 74 (group -> ID index .)
    LOR             reduce using rule 74 (group -> ID index .)
    ;               reduce using rule 74 (group -> ID index .)
    ]               reduce using rule 74 (group -> ID index .)
    ,               reduce using rule 74 (group -> ID index .)
    }               reduce using rule 74 (group -> ID index .)
    )               reduce using rule 74 (group -> ID index .)


state 87

    (75) group -> ID ( . opt_expr_list )
    (36) opt_expr_list -> . expr_list
    (37) opt_expr_list -> . empty
    (38) expr_list -> . expr
    (39) expr_list -> . expr , expr_list
    (104) empty -> .
    (42) expr -> . expr1
    (43) expr1 -> . expr2
    (44) expr1 -> . lval ASSIGN expr1
    (47) expr2 -> . expr3
    (48) expr2 -> . expr2 LOR expr3
    (45) lval -> . ID index
    (46) lval -> . ID
    (49) expr3 -> . expr4
    (50) expr3 -> . expr3 LAND expr4
    (51) expr4 -> . expr5
    (52) expr4 -> . expr4 GE expr5
    (53) expr4 -> . expr4 GT expr5
    (54) expr4 -> . expr4 LE expr5
    (55) expr4 -> . expr4 LT expr5
    (56) expr4 -> . expr4 NEQ expr5
    (57) expr4 -> . expr4 EQ expr5
    (58) expr5 -> . expr6
    (59) expr5 -> . expr5 - expr6
    (60) expr5 -> . expr5 + expr6
    (61) expr6 -> . expr7
    (62) expr6 -> . expr6 % expr7
    (63) expr6 -> . expr6 / expr7
    (64) expr6 -> . expr6 * expr7
    (65) expr7 -> . expr8
    (66) expr7 -> . expr7 ^ expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    )               reduce using rule 104 (empty -> .)
    ID              shift and go to state 32
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    opt_expr_list                  shift and go to state 133
    expr_list                      shift and go to state 83
    empty                          shift and go to state 84
    expr                           shift and go to state 85
    expr1                          shift and go to state 34
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 88

    (10) decl_init -> ID : type_simple ASSIGN expr ; .
    ID              reduce using rule 10 (decl_init -> ID : type_simple ASSIGN expr ; .)
    $end            reduce using rule 10 (decl_init -> ID : type_simple ASSIGN expr ; .)


state 89

    (48) expr2 -> expr2 LOR . expr3
    (49) expr3 -> . expr4
    (50) expr3 -> . expr3 LAND expr4
    (51) expr4 -> . expr5
    (52) expr4 -> . expr4 GE expr5
    (53) expr4 -> . expr4 GT expr5
    (54) expr4 -> . expr4 LE expr5
    (55) expr4 -> . expr4 LT expr5
    (56) expr4 -> . expr4 NEQ expr5
    (57) expr4 -> . expr4 EQ expr5
    (58) expr5 -> . expr6
    (59) expr5 -> . expr5 - expr6
    (60) expr5 -> . expr5 + expr6
    (61) expr6 -> . expr7
    (62) expr6 -> . expr6 % expr7
    (63) expr6 -> . expr6 / expr7
    (64) expr6 -> . expr6 * expr7
    (65) expr7 -> . expr8
    (66) expr7 -> . expr7 ^ expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    !               shift and go to state 45
    -               shift and go to state 41
    ID              shift and go to state 104
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    expr3                          shift and go to state 134
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 90

    (44) expr1 -> lval ASSIGN . expr1
    (43) expr1 -> . expr2
    (44) expr1 -> . lval ASSIGN expr1
    (47) expr2 -> . expr3
    (48) expr2 -> . expr2 LOR expr3
    (45) lval -> . ID index
    (46) lval -> . ID
    (49) expr3 -> . expr4
    (50) expr3 -> . expr3 LAND expr4
    (51) expr4 -> . expr5
    (52) expr4 -> . expr4 GE expr5
    (53) expr4 -> . expr4 GT expr5
    (54) expr4 -> . expr4 LE expr5
    (55) expr4 -> . expr4 LT expr5
    (56) expr4 -> . expr4 NEQ expr5
    (57) expr4 -> . expr4 EQ expr5
    (58) expr5 -> . expr6
    (59) expr5 -> . expr5 - expr6
    (60) expr5 -> . expr5 + expr6
    (61) expr6 -> . expr7
    (62) expr6 -> . expr6 % expr7
    (63) expr6 -> . expr6 / expr7
    (64) expr6 -> . expr6 * expr7
    (65) expr7 -> . expr8
    (66) expr7 -> . expr7 ^ expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    ID              shift and go to state 32
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    lval                           shift and go to state 36
    expr1                          shift and go to state 135
    expr2                          shift and go to state 35
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 91

    (50) expr3 -> expr3 LAND . expr4
    (51) expr4 -> . expr5
    (52) expr4 -> . expr4 GE expr5
    (53) expr4 -> . expr4 GT expr5
    (54) expr4 -> . expr4 LE expr5
    (55) expr4 -> . expr4 LT expr5
    (56) expr4 -> . expr4 NEQ expr5
    (57) expr4 -> . expr4 EQ expr5
    (58) expr5 -> . expr6
    (59) expr5 -> . expr5 - expr6
    (60) expr5 -> . expr5 + expr6
    (61) expr6 -> . expr7
    (62) expr6 -> . expr6 % expr7
    (63) expr6 -> . expr6 / expr7
    (64) expr6 -> . expr6 * expr7
    (65) expr7 -> . expr8
    (66) expr7 -> . expr7 ^ expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    !               shift and go to state 45
    -               shift and go to state 41
    ID              shift and go to state 104
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    expr4                          shift and go to state 136
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 92

    (52) expr4 -> expr4 GE . expr5
    (58) expr5 -> . expr6
    (59) expr5 -> . expr5 - expr6
    (60) expr5 -> . expr5 + expr6
    (61) expr6 -> . expr7
    (62) expr6 -> . expr6 % expr7
    (63) expr6 -> . expr6 / expr7
    (64) expr6 -> . expr6 * expr7
    (65) expr7 -> . expr8
    (66) expr7 -> . expr7 ^ expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    !               shift and go to state 45
    -               shift and go to state 41
    ID              shift and go to state 104
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    expr5                          shift and go to state 137
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 93

    (53) expr4 -> expr4 GT . expr5
    (58) expr5 -> . expr6
    (59) expr5 -> . expr5 - expr6
    (60) expr5 -> . expr5 + expr6
    (61) expr6 -> . expr7
    (62) expr6 -> . expr6 % expr7
    (63) expr6 -> . expr6 / expr7
    (64) expr6 -> . expr6 * expr7
    (65) expr7 -> . expr8
    (66) expr7 -> . expr7 ^ expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    !               shift and go to state 45
    -               shift and go to state 41
    ID              shift and go to state 104
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    expr5                          shift and go to state 138
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 94

    (54) expr4 -> expr4 LE . expr5
    (58) expr5 -> . expr6
    (59) expr5 -> . expr5 - expr6
    (60) expr5 -> . expr5 + expr6
    (61) expr6 -> . expr7
    (62) expr6 -> . expr6 % expr7
    (63) expr6 -> . expr6 / expr7
    (64) expr6 -> . expr6 * expr7
    (65) expr7 -> . expr8
    (66) expr7 -> . expr7 ^ expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    !               shift and go to state 45
    -               shift and go to state 41
    ID              shift and go to state 104
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    expr5                          shift and go to state 139
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 95

    (55) expr4 -> expr4 LT . expr5
    (58) expr5 -> . expr6
    (59) expr5 -> . expr5 - expr6
    (60) expr5 -> . expr5 + expr6
    (61) expr6 -> . expr7
    (62) expr6 -> . expr6 % expr7
    (63) expr6 -> . expr6 / expr7
    (64) expr6 -> . expr6 * expr7
    (65) expr7 -> . expr8
    (66) expr7 -> . expr7 ^ expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    !               shift and go to state 45
    -               shift and go to state 41
    ID              shift and go to state 104
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    expr5                          shift and go to state 140
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 96

    (56) expr4 -> expr4 NEQ . expr5
    (58) expr5 -> . expr6
    (59) expr5 -> . expr5 - expr6
    (60) expr5 -> . expr5 + expr6
    (61) expr6 -> . expr7
    (62) expr6 -> . expr6 % expr7
    (63) expr6 -> . expr6 / expr7
    (64) expr6 -> . expr6 * expr7
    (65) expr7 -> . expr8
    (66) expr7 -> . expr7 ^ expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    !               shift and go to state 45
    -               shift and go to state 41
    ID              shift and go to state 104
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    expr5                          shift and go to state 141
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 97

    (57) expr4 -> expr4 EQ . expr5
    (58) expr5 -> . expr6
    (59) expr5 -> . expr5 - expr6
    (60) expr5 -> . expr5 + expr6
    (61) expr6 -> . expr7
    (62) expr6 -> . expr6 % expr7
    (63) expr6 -> . expr6 / expr7
    (64) expr6 -> . expr6 * expr7
    (65) expr7 -> . expr8
    (66) expr7 -> . expr7 ^ expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    !               shift and go to state 45
    -               shift and go to state 41
    ID              shift and go to state 104
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    expr5                          shift and go to state 142
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 98

    (59) expr5 -> expr5 - . expr6
    (61) expr6 -> . expr7
    (62) expr6 -> . expr6 % expr7
    (63) expr6 -> . expr6 / expr7
    (64) expr6 -> . expr6 * expr7
    (65) expr7 -> . expr8
    (66) expr7 -> . expr7 ^ expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    !               shift and go to state 45
    -               shift and go to state 41
    ID              shift and go to state 104
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    expr6                          shift and go to state 143
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 99

    (60) expr5 -> expr5 + . expr6
    (61) expr6 -> . expr7
    (62) expr6 -> . expr6 % expr7
    (63) expr6 -> . expr6 / expr7
    (64) expr6 -> . expr6 * expr7
    (65) expr7 -> . expr8
    (66) expr7 -> . expr7 ^ expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    !               shift and go to state 45
    -               shift and go to state 41
    ID              shift and go to state 104
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    expr6                          shift and go to state 144
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 100

    (62) expr6 -> expr6 % . expr7
    (65) expr7 -> . expr8
    (66) expr7 -> . expr7 ^ expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    !               shift and go to state 45
    -               shift and go to state 41
    ID              shift and go to state 104
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    expr7                          shift and go to state 145
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 101

    (63) expr6 -> expr6 / . expr7
    (65) expr7 -> . expr8
    (66) expr7 -> . expr7 ^ expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    !               shift and go to state 45
    -               shift and go to state 41
    ID              shift and go to state 104
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    expr7                          shift and go to state 146
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 102

    (64) expr6 -> expr6 * . expr7
    (65) expr7 -> . expr8
    (66) expr7 -> . expr7 ^ expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    !               shift and go to state 45
    -               shift and go to state 41
    ID              shift and go to state 104
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    expr7                          shift and go to state 147
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 103

    (69) expr8 -> - expr8 .
    ^               reduce using rule 69 (expr8 -> - expr8 .)
    %               reduce using rule 69 (expr8 -> - expr8 .)
    /               reduce using rule 69 (expr8 -> - expr8 .)
    *               reduce using rule 69 (expr8 -> - expr8 .)
    -               reduce using rule 69 (expr8 -> - expr8 .)
    +               reduce using rule 69 (expr8 -> - expr8 .)
    GE              reduce using rule 69 (expr8 -> - expr8 .)
    GT              reduce using rule 69 (expr8 -> - expr8 .)
    LE              reduce using rule 69 (expr8 -> - expr8 .)
    LT              reduce using rule 69 (expr8 -> - expr8 .)
    NEQ             reduce using rule 69 (expr8 -> - expr8 .)
    EQ              reduce using rule 69 (expr8 -> - expr8 .)
    LAND            reduce using rule 69 (expr8 -> - expr8 .)
    LOR             reduce using rule 69 (expr8 -> - expr8 .)
    ;               reduce using rule 69 (expr8 -> - expr8 .)
    ]               reduce using rule 69 (expr8 -> - expr8 .)
    ,               reduce using rule 69 (expr8 -> - expr8 .)
    }               reduce using rule 69 (expr8 -> - expr8 .)
    )               reduce using rule 69 (expr8 -> - expr8 .)


state 104

    (74) group -> ID . index
    (75) group -> ID . ( opt_expr_list )
    (84) factor -> ID .
    (77) index -> . [ expr ]
    (               shift and go to state 87
    DEC             reduce using rule 84 (factor -> ID .)
    INC             reduce using rule 84 (factor -> ID .)
    ^               reduce using rule 84 (factor -> ID .)
    %               reduce using rule 84 (factor -> ID .)
    /               reduce using rule 84 (factor -> ID .)
    *               reduce using rule 84 (factor -> ID .)
    -               reduce using rule 84 (factor -> ID .)
    +               reduce using rule 84 (factor -> ID .)
    GE              reduce using rule 84 (factor -> ID .)
    GT              reduce using rule 84 (factor -> ID .)
    LE              reduce using rule 84 (factor -> ID .)
    LT              reduce using rule 84 (factor -> ID .)
    NEQ             reduce using rule 84 (factor -> ID .)
    EQ              reduce using rule 84 (factor -> ID .)
    LAND            reduce using rule 84 (factor -> ID .)
    LOR             reduce using rule 84 (factor -> ID .)
    ;               reduce using rule 84 (factor -> ID .)
    ]               reduce using rule 84 (factor -> ID .)
    ,               reduce using rule 84 (factor -> ID .)
    }               reduce using rule 84 (factor -> ID .)
    )               reduce using rule 84 (factor -> ID .)
    [               shift and go to state 29

    index                          shift and go to state 148

state 105

    (66) expr7 -> expr7 ^ . expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    !               shift and go to state 45
    -               shift and go to state 41
    ID              shift and go to state 104
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    expr8                          shift and go to state 149
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 106

    (71) expr9 -> expr9 DEC .
    DEC             reduce using rule 71 (expr9 -> expr9 DEC .)
    INC             reduce using rule 71 (expr9 -> expr9 DEC .)
    ^               reduce using rule 71 (expr9 -> expr9 DEC .)
    %               reduce using rule 71 (expr9 -> expr9 DEC .)
    /               reduce using rule 71 (expr9 -> expr9 DEC .)
    *               reduce using rule 71 (expr9 -> expr9 DEC .)
    -               reduce using rule 71 (expr9 -> expr9 DEC .)
    +               reduce using rule 71 (expr9 -> expr9 DEC .)
    GE              reduce using rule 71 (expr9 -> expr9 DEC .)
    GT              reduce using rule 71 (expr9 -> expr9 DEC .)
    LE              reduce using rule 71 (expr9 -> expr9 DEC .)
    LT              reduce using rule 71 (expr9 -> expr9 DEC .)
    NEQ             reduce using rule 71 (expr9 -> expr9 DEC .)
    EQ              reduce using rule 71 (expr9 -> expr9 DEC .)
    LAND            reduce using rule 71 (expr9 -> expr9 DEC .)
    LOR             reduce using rule 71 (expr9 -> expr9 DEC .)
    ;               reduce using rule 71 (expr9 -> expr9 DEC .)
    ]               reduce using rule 71 (expr9 -> expr9 DEC .)
    ,               reduce using rule 71 (expr9 -> expr9 DEC .)
    }               reduce using rule 71 (expr9 -> expr9 DEC .)
    )               reduce using rule 71 (expr9 -> expr9 DEC .)


state 107

    (72) expr9 -> expr9 INC .
    DEC             reduce using rule 72 (expr9 -> expr9 INC .)
    INC             reduce using rule 72 (expr9 -> expr9 INC .)
    ^               reduce using rule 72 (expr9 -> expr9 INC .)
    %               reduce using rule 72 (expr9 -> expr9 INC .)
    /               reduce using rule 72 (expr9 -> expr9 INC .)
    *               reduce using rule 72 (expr9 -> expr9 INC .)
    -               reduce using rule 72 (expr9 -> expr9 INC .)
    +               reduce using rule 72 (expr9 -> expr9 INC .)
    GE              reduce using rule 72 (expr9 -> expr9 INC .)
    GT              reduce using rule 72 (expr9 -> expr9 INC .)
    LE              reduce using rule 72 (expr9 -> expr9 INC .)
    LT              reduce using rule 72 (expr9 -> expr9 INC .)
    NEQ             reduce using rule 72 (expr9 -> expr9 INC .)
    EQ              reduce using rule 72 (expr9 -> expr9 INC .)
    LAND            reduce using rule 72 (expr9 -> expr9 INC .)
    LOR             reduce using rule 72 (expr9 -> expr9 INC .)
    ;               reduce using rule 72 (expr9 -> expr9 INC .)
    ]               reduce using rule 72 (expr9 -> expr9 INC .)
    ,               reduce using rule 72 (expr9 -> expr9 INC .)
    }               reduce using rule 72 (expr9 -> expr9 INC .)
    )               reduce using rule 72 (expr9 -> expr9 INC .)


state 108

    (68) expr8 -> ! expr8 .
    ^               reduce using rule 68 (expr8 -> ! expr8 .)
    %               reduce using rule 68 (expr8 -> ! expr8 .)
    /               reduce using rule 68 (expr8 -> ! expr8 .)
    *               reduce using rule 68 (expr8 -> ! expr8 .)
    -               reduce using rule 68 (expr8 -> ! expr8 .)
    +               reduce using rule 68 (expr8 -> ! expr8 .)
    GE              reduce using rule 68 (expr8 -> ! expr8 .)
    GT              reduce using rule 68 (expr8 -> ! expr8 .)
    LE              reduce using rule 68 (expr8 -> ! expr8 .)
    LT              reduce using rule 68 (expr8 -> ! expr8 .)
    NEQ             reduce using rule 68 (expr8 -> ! expr8 .)
    EQ              reduce using rule 68 (expr8 -> ! expr8 .)
    LAND            reduce using rule 68 (expr8 -> ! expr8 .)
    LOR             reduce using rule 68 (expr8 -> ! expr8 .)
    ;               reduce using rule 68 (expr8 -> ! expr8 .)
    ]               reduce using rule 68 (expr8 -> ! expr8 .)
    ,               reduce using rule 68 (expr8 -> ! expr8 .)
    }               reduce using rule 68 (expr8 -> ! expr8 .)
    )               reduce using rule 68 (expr8 -> ! expr8 .)


state 109

    (76) group -> ( expr . )
    )               shift and go to state 150


state 110

    (95) type_func -> FUNCTION type_array_sized ( opt_param_list . )
    )               shift and go to state 151


state 111

    (97) opt_param_list -> param_list .
    (100) param_list -> param_list . , param
    )               reduce using rule 97 (opt_param_list -> param_list .)
    ,               shift and go to state 152


state 112

    (98) opt_param_list -> empty .
    )               reduce using rule 98 (opt_param_list -> empty .)


state 113

    (99) param_list -> param .
    ,               reduce using rule 99 (param_list -> param .)
    )               reduce using rule 99 (param_list -> param .)


state 114

    (101) param -> ID . : type_array_sized
    (102) param -> ID . : type_array
    (103) param -> ID . : type_simple
    :               shift and go to state 153


state 115

    (96) type_func -> FUNCTION type_simple ( opt_param_list . )
    )               shift and go to state 154


state 116

    (77) index -> [ expr ] .
    ARRAY           reduce using rule 77 (index -> [ expr ] .)
    VOID            reduce using rule 77 (index -> [ expr ] .)
    STRING          reduce using rule 77 (index -> [ expr ] .)
    CHAR            reduce using rule 77 (index -> [ expr ] .)
    BOOLEAN         reduce using rule 77 (index -> [ expr ] .)
    FLOAT           reduce using rule 77 (index -> [ expr ] .)
    INTEGER         reduce using rule 77 (index -> [ expr ] .)
    ASSIGN          reduce using rule 77 (index -> [ expr ] .)
    DEC             reduce using rule 77 (index -> [ expr ] .)
    INC             reduce using rule 77 (index -> [ expr ] .)
    ^               reduce using rule 77 (index -> [ expr ] .)
    %               reduce using rule 77 (index -> [ expr ] .)
    /               reduce using rule 77 (index -> [ expr ] .)
    *               reduce using rule 77 (index -> [ expr ] .)
    -               reduce using rule 77 (index -> [ expr ] .)
    +               reduce using rule 77 (index -> [ expr ] .)
    GE              reduce using rule 77 (index -> [ expr ] .)
    GT              reduce using rule 77 (index -> [ expr ] .)
    LE              reduce using rule 77 (index -> [ expr ] .)
    LT              reduce using rule 77 (index -> [ expr ] .)
    NEQ             reduce using rule 77 (index -> [ expr ] .)
    EQ              reduce using rule 77 (index -> [ expr ] .)
    LAND            reduce using rule 77 (index -> [ expr ] .)
    LOR             reduce using rule 77 (index -> [ expr ] .)
    ;               reduce using rule 77 (index -> [ expr ] .)
    ]               reduce using rule 77 (index -> [ expr ] .)
    ,               reduce using rule 77 (index -> [ expr ] .)
    }               reduce using rule 77 (index -> [ expr ] .)
    )               reduce using rule 77 (index -> [ expr ] .)


state 117

    (35) block_stmt -> { stmt_list . }
    }               shift and go to state 155


state 118

    (8) decl_init -> ID : type_func ASSIGN { opt_stmt_list } .
    ID              reduce using rule 8 (decl_init -> ID : type_func ASSIGN { opt_stmt_list } .)
    $end            reduce using rule 8 (decl_init -> ID : type_func ASSIGN { opt_stmt_list } .)


state 119

    (14) stmt_list -> stmt stmt_list .
    }               reduce using rule 14 (stmt_list -> stmt stmt_list .)


state 120

    (29) simple_stmt -> expr ; .
    {               reduce using rule 29 (simple_stmt -> expr ; .)
    RETURN          reduce using rule 29 (simple_stmt -> expr ; .)
    PRINT           reduce using rule 29 (simple_stmt -> expr ; .)
    FOR             reduce using rule 29 (simple_stmt -> expr ; .)
    IF              reduce using rule 29 (simple_stmt -> expr ; .)
    ID              reduce using rule 29 (simple_stmt -> expr ; .)
    !               reduce using rule 29 (simple_stmt -> expr ; .)
    -               reduce using rule 29 (simple_stmt -> expr ; .)
    (               reduce using rule 29 (simple_stmt -> expr ; .)
    FALSE           reduce using rule 29 (simple_stmt -> expr ; .)
    TRUE            reduce using rule 29 (simple_stmt -> expr ; .)
    STRING_LITERAL  reduce using rule 29 (simple_stmt -> expr ; .)
    CHAR_LITERAL    reduce using rule 29 (simple_stmt -> expr ; .)
    FLOAT_LITERAL   reduce using rule 29 (simple_stmt -> expr ; .)
    INTEGER_LITERAL reduce using rule 29 (simple_stmt -> expr ; .)
    }               reduce using rule 29 (simple_stmt -> expr ; .)
    ELSE            reduce using rule 29 (simple_stmt -> expr ; .)


state 121

    (28) for_stmt_closed -> for_header closed_stmt .
    {               reduce using rule 28 (for_stmt_closed -> for_header closed_stmt .)
    RETURN          reduce using rule 28 (for_stmt_closed -> for_header closed_stmt .)
    PRINT           reduce using rule 28 (for_stmt_closed -> for_header closed_stmt .)
    FOR             reduce using rule 28 (for_stmt_closed -> for_header closed_stmt .)
    IF              reduce using rule 28 (for_stmt_closed -> for_header closed_stmt .)
    ID              reduce using rule 28 (for_stmt_closed -> for_header closed_stmt .)
    !               reduce using rule 28 (for_stmt_closed -> for_header closed_stmt .)
    -               reduce using rule 28 (for_stmt_closed -> for_header closed_stmt .)
    (               reduce using rule 28 (for_stmt_closed -> for_header closed_stmt .)
    FALSE           reduce using rule 28 (for_stmt_closed -> for_header closed_stmt .)
    TRUE            reduce using rule 28 (for_stmt_closed -> for_header closed_stmt .)
    STRING_LITERAL  reduce using rule 28 (for_stmt_closed -> for_header closed_stmt .)
    CHAR_LITERAL    reduce using rule 28 (for_stmt_closed -> for_header closed_stmt .)
    FLOAT_LITERAL   reduce using rule 28 (for_stmt_closed -> for_header closed_stmt .)
    INTEGER_LITERAL reduce using rule 28 (for_stmt_closed -> for_header closed_stmt .)
    }               reduce using rule 28 (for_stmt_closed -> for_header closed_stmt .)
    ELSE            reduce using rule 28 (for_stmt_closed -> for_header closed_stmt .)


state 122

    (27) for_stmt_open -> for_header open_stmt .
    {               reduce using rule 27 (for_stmt_open -> for_header open_stmt .)
    RETURN          reduce using rule 27 (for_stmt_open -> for_header open_stmt .)
    PRINT           reduce using rule 27 (for_stmt_open -> for_header open_stmt .)
    FOR             reduce using rule 27 (for_stmt_open -> for_header open_stmt .)
    IF              reduce using rule 27 (for_stmt_open -> for_header open_stmt .)
    ID              reduce using rule 27 (for_stmt_open -> for_header open_stmt .)
    !               reduce using rule 27 (for_stmt_open -> for_header open_stmt .)
    -               reduce using rule 27 (for_stmt_open -> for_header open_stmt .)
    (               reduce using rule 27 (for_stmt_open -> for_header open_stmt .)
    FALSE           reduce using rule 27 (for_stmt_open -> for_header open_stmt .)
    TRUE            reduce using rule 27 (for_stmt_open -> for_header open_stmt .)
    STRING_LITERAL  reduce using rule 27 (for_stmt_open -> for_header open_stmt .)
    CHAR_LITERAL    reduce using rule 27 (for_stmt_open -> for_header open_stmt .)
    FLOAT_LITERAL   reduce using rule 27 (for_stmt_open -> for_header open_stmt .)
    INTEGER_LITERAL reduce using rule 27 (for_stmt_open -> for_header open_stmt .)
    }               reduce using rule 27 (for_stmt_open -> for_header open_stmt .)


state 123

    (23) if_stmt_closed -> if_cond closed_stmt . ELSE closed_stmt
    (24) if_stmt_open -> if_cond closed_stmt . ELSE if_stmt_open
    (15) stmt -> closed_stmt .
    ELSE            shift and go to state 156
    {               reduce using rule 15 (stmt -> closed_stmt .)
    RETURN          reduce using rule 15 (stmt -> closed_stmt .)
    PRINT           reduce using rule 15 (stmt -> closed_stmt .)
    FOR             reduce using rule 15 (stmt -> closed_stmt .)
    IF              reduce using rule 15 (stmt -> closed_stmt .)
    ID              reduce using rule 15 (stmt -> closed_stmt .)
    !               reduce using rule 15 (stmt -> closed_stmt .)
    -               reduce using rule 15 (stmt -> closed_stmt .)
    (               reduce using rule 15 (stmt -> closed_stmt .)
    FALSE           reduce using rule 15 (stmt -> closed_stmt .)
    TRUE            reduce using rule 15 (stmt -> closed_stmt .)
    STRING_LITERAL  reduce using rule 15 (stmt -> closed_stmt .)
    CHAR_LITERAL    reduce using rule 15 (stmt -> closed_stmt .)
    FLOAT_LITERAL   reduce using rule 15 (stmt -> closed_stmt .)
    INTEGER_LITERAL reduce using rule 15 (stmt -> closed_stmt .)
    }               reduce using rule 15 (stmt -> closed_stmt .)


state 124

    (25) if_stmt_open -> if_cond stmt .
    {               reduce using rule 25 (if_stmt_open -> if_cond stmt .)
    RETURN          reduce using rule 25 (if_stmt_open -> if_cond stmt .)
    PRINT           reduce using rule 25 (if_stmt_open -> if_cond stmt .)
    FOR             reduce using rule 25 (if_stmt_open -> if_cond stmt .)
    IF              reduce using rule 25 (if_stmt_open -> if_cond stmt .)
    ID              reduce using rule 25 (if_stmt_open -> if_cond stmt .)
    !               reduce using rule 25 (if_stmt_open -> if_cond stmt .)
    -               reduce using rule 25 (if_stmt_open -> if_cond stmt .)
    (               reduce using rule 25 (if_stmt_open -> if_cond stmt .)
    FALSE           reduce using rule 25 (if_stmt_open -> if_cond stmt .)
    TRUE            reduce using rule 25 (if_stmt_open -> if_cond stmt .)
    STRING_LITERAL  reduce using rule 25 (if_stmt_open -> if_cond stmt .)
    CHAR_LITERAL    reduce using rule 25 (if_stmt_open -> if_cond stmt .)
    FLOAT_LITERAL   reduce using rule 25 (if_stmt_open -> if_cond stmt .)
    INTEGER_LITERAL reduce using rule 25 (if_stmt_open -> if_cond stmt .)
    }               reduce using rule 25 (if_stmt_open -> if_cond stmt .)


state 125

    (34) return_stmt -> RETURN opt_expr . ;
    ;               shift and go to state 157


state 126

    (40) opt_expr -> expr .
    ;               reduce using rule 40 (opt_expr -> expr .)
    )               reduce using rule 40 (opt_expr -> expr .)


state 127

    (41) opt_expr -> empty .
    ;               reduce using rule 41 (opt_expr -> empty .)
    )               reduce using rule 41 (opt_expr -> empty .)


state 128

    (33) print_stmt -> PRINT opt_expr_list . ;
    ;               shift and go to state 158


state 129

    (26) for_header -> FOR ( . opt_expr ; opt_expr ; opt_expr )
    (40) opt_expr -> . expr
    (41) opt_expr -> . empty
    (42) expr -> . expr1
    (104) empty -> .
    (43) expr1 -> . expr2
    (44) expr1 -> . lval ASSIGN expr1
    (47) expr2 -> . expr3
    (48) expr2 -> . expr2 LOR expr3
    (45) lval -> . ID index
    (46) lval -> . ID
    (49) expr3 -> . expr4
    (50) expr3 -> . expr3 LAND expr4
    (51) expr4 -> . expr5
    (52) expr4 -> . expr4 GE expr5
    (53) expr4 -> . expr4 GT expr5
    (54) expr4 -> . expr4 LE expr5
    (55) expr4 -> . expr4 LT expr5
    (56) expr4 -> . expr4 NEQ expr5
    (57) expr4 -> . expr4 EQ expr5
    (58) expr5 -> . expr6
    (59) expr5 -> . expr5 - expr6
    (60) expr5 -> . expr5 + expr6
    (61) expr6 -> . expr7
    (62) expr6 -> . expr6 % expr7
    (63) expr6 -> . expr6 / expr7
    (64) expr6 -> . expr6 * expr7
    (65) expr7 -> . expr8
    (66) expr7 -> . expr7 ^ expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    ;               reduce using rule 104 (empty -> .)
    ID              shift and go to state 32
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    opt_expr                       shift and go to state 159
    expr                           shift and go to state 126
    empty                          shift and go to state 127
    expr1                          shift and go to state 34
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 130

    (22) if_cond -> IF ( . opt_expr )
    (40) opt_expr -> . expr
    (41) opt_expr -> . empty
    (42) expr -> . expr1
    (104) empty -> .
    (43) expr1 -> . expr2
    (44) expr1 -> . lval ASSIGN expr1
    (47) expr2 -> . expr3
    (48) expr2 -> . expr2 LOR expr3
    (45) lval -> . ID index
    (46) lval -> . ID
    (49) expr3 -> . expr4
    (50) expr3 -> . expr3 LAND expr4
    (51) expr4 -> . expr5
    (52) expr4 -> . expr4 GE expr5
    (53) expr4 -> . expr4 GT expr5
    (54) expr4 -> . expr4 LE expr5
    (55) expr4 -> . expr4 LT expr5
    (56) expr4 -> . expr4 NEQ expr5
    (57) expr4 -> . expr4 EQ expr5
    (58) expr5 -> . expr6
    (59) expr5 -> . expr5 - expr6
    (60) expr5 -> . expr5 + expr6
    (61) expr6 -> . expr7
    (62) expr6 -> . expr6 % expr7
    (63) expr6 -> . expr6 / expr7
    (64) expr6 -> . expr6 * expr7
    (65) expr7 -> . expr8
    (66) expr7 -> . expr7 ^ expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    )               reduce using rule 104 (empty -> .)
    ID              shift and go to state 32
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    opt_expr                       shift and go to state 160
    expr                           shift and go to state 126
    empty                          shift and go to state 127
    expr1                          shift and go to state 34
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 131

    (9) decl_init -> ID : type_array_sized ASSIGN { opt_expr_list } . ;
    ;               shift and go to state 161


state 132

    (39) expr_list -> expr , . expr_list
    (38) expr_list -> . expr
    (39) expr_list -> . expr , expr_list
    (42) expr -> . expr1
    (43) expr1 -> . expr2
    (44) expr1 -> . lval ASSIGN expr1
    (47) expr2 -> . expr3
    (48) expr2 -> . expr2 LOR expr3
    (45) lval -> . ID index
    (46) lval -> . ID
    (49) expr3 -> . expr4
    (50) expr3 -> . expr3 LAND expr4
    (51) expr4 -> . expr5
    (52) expr4 -> . expr4 GE expr5
    (53) expr4 -> . expr4 GT expr5
    (54) expr4 -> . expr4 LE expr5
    (55) expr4 -> . expr4 LT expr5
    (56) expr4 -> . expr4 NEQ expr5
    (57) expr4 -> . expr4 EQ expr5
    (58) expr5 -> . expr6
    (59) expr5 -> . expr5 - expr6
    (60) expr5 -> . expr5 + expr6
    (61) expr6 -> . expr7
    (62) expr6 -> . expr6 % expr7
    (63) expr6 -> . expr6 / expr7
    (64) expr6 -> . expr6 * expr7
    (65) expr7 -> . expr8
    (66) expr7 -> . expr7 ^ expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    ID              shift and go to state 32
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    expr                           shift and go to state 85
    expr_list                      shift and go to state 162
    expr1                          shift and go to state 34
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 133

    (75) group -> ID ( opt_expr_list . )
    )               shift and go to state 163


state 134

    (48) expr2 -> expr2 LOR expr3 .
    (50) expr3 -> expr3 . LAND expr4
    LOR             reduce using rule 48 (expr2 -> expr2 LOR expr3 .)
    ;               reduce using rule 48 (expr2 -> expr2 LOR expr3 .)
    ]               reduce using rule 48 (expr2 -> expr2 LOR expr3 .)
    ,               reduce using rule 48 (expr2 -> expr2 LOR expr3 .)
    }               reduce using rule 48 (expr2 -> expr2 LOR expr3 .)
    )               reduce using rule 48 (expr2 -> expr2 LOR expr3 .)
    LAND            shift and go to state 91


state 135

    (44) expr1 -> lval ASSIGN expr1 .
    ;               reduce using rule 44 (expr1 -> lval ASSIGN expr1 .)
    ]               reduce using rule 44 (expr1 -> lval ASSIGN expr1 .)
    ,               reduce using rule 44 (expr1 -> lval ASSIGN expr1 .)
    }               reduce using rule 44 (expr1 -> lval ASSIGN expr1 .)
    )               reduce using rule 44 (expr1 -> lval ASSIGN expr1 .)


state 136

    (50) expr3 -> expr3 LAND expr4 .
    (52) expr4 -> expr4 . GE expr5
    (53) expr4 -> expr4 . GT expr5
    (54) expr4 -> expr4 . LE expr5
    (55) expr4 -> expr4 . LT expr5
    (56) expr4 -> expr4 . NEQ expr5
    (57) expr4 -> expr4 . EQ expr5
    LAND            reduce using rule 50 (expr3 -> expr3 LAND expr4 .)
    LOR             reduce using rule 50 (expr3 -> expr3 LAND expr4 .)
    ;               reduce using rule 50 (expr3 -> expr3 LAND expr4 .)
    ]               reduce using rule 50 (expr3 -> expr3 LAND expr4 .)
    ,               reduce using rule 50 (expr3 -> expr3 LAND expr4 .)
    }               reduce using rule 50 (expr3 -> expr3 LAND expr4 .)
    )               reduce using rule 50 (expr3 -> expr3 LAND expr4 .)
    GE              shift and go to state 92
    GT              shift and go to state 93
    LE              shift and go to state 94
    LT              shift and go to state 95
    NEQ             shift and go to state 96
    EQ              shift and go to state 97


state 137

    (52) expr4 -> expr4 GE expr5 .
    (59) expr5 -> expr5 . - expr6
    (60) expr5 -> expr5 . + expr6
    GE              reduce using rule 52 (expr4 -> expr4 GE expr5 .)
    GT              reduce using rule 52 (expr4 -> expr4 GE expr5 .)
    LE              reduce using rule 52 (expr4 -> expr4 GE expr5 .)
    LT              reduce using rule 52 (expr4 -> expr4 GE expr5 .)
    NEQ             reduce using rule 52 (expr4 -> expr4 GE expr5 .)
    EQ              reduce using rule 52 (expr4 -> expr4 GE expr5 .)
    LAND            reduce using rule 52 (expr4 -> expr4 GE expr5 .)
    LOR             reduce using rule 52 (expr4 -> expr4 GE expr5 .)
    ;               reduce using rule 52 (expr4 -> expr4 GE expr5 .)
    ]               reduce using rule 52 (expr4 -> expr4 GE expr5 .)
    ,               reduce using rule 52 (expr4 -> expr4 GE expr5 .)
    }               reduce using rule 52 (expr4 -> expr4 GE expr5 .)
    )               reduce using rule 52 (expr4 -> expr4 GE expr5 .)
    -               shift and go to state 98
    +               shift and go to state 99


state 138

    (53) expr4 -> expr4 GT expr5 .
    (59) expr5 -> expr5 . - expr6
    (60) expr5 -> expr5 . + expr6
    GE              reduce using rule 53 (expr4 -> expr4 GT expr5 .)
    GT              reduce using rule 53 (expr4 -> expr4 GT expr5 .)
    LE              reduce using rule 53 (expr4 -> expr4 GT expr5 .)
    LT              reduce using rule 53 (expr4 -> expr4 GT expr5 .)
    NEQ             reduce using rule 53 (expr4 -> expr4 GT expr5 .)
    EQ              reduce using rule 53 (expr4 -> expr4 GT expr5 .)
    LAND            reduce using rule 53 (expr4 -> expr4 GT expr5 .)
    LOR             reduce using rule 53 (expr4 -> expr4 GT expr5 .)
    ;               reduce using rule 53 (expr4 -> expr4 GT expr5 .)
    ]               reduce using rule 53 (expr4 -> expr4 GT expr5 .)
    ,               reduce using rule 53 (expr4 -> expr4 GT expr5 .)
    }               reduce using rule 53 (expr4 -> expr4 GT expr5 .)
    )               reduce using rule 53 (expr4 -> expr4 GT expr5 .)
    -               shift and go to state 98
    +               shift and go to state 99


state 139

    (54) expr4 -> expr4 LE expr5 .
    (59) expr5 -> expr5 . - expr6
    (60) expr5 -> expr5 . + expr6
    GE              reduce using rule 54 (expr4 -> expr4 LE expr5 .)
    GT              reduce using rule 54 (expr4 -> expr4 LE expr5 .)
    LE              reduce using rule 54 (expr4 -> expr4 LE expr5 .)
    LT              reduce using rule 54 (expr4 -> expr4 LE expr5 .)
    NEQ             reduce using rule 54 (expr4 -> expr4 LE expr5 .)
    EQ              reduce using rule 54 (expr4 -> expr4 LE expr5 .)
    LAND            reduce using rule 54 (expr4 -> expr4 LE expr5 .)
    LOR             reduce using rule 54 (expr4 -> expr4 LE expr5 .)
    ;               reduce using rule 54 (expr4 -> expr4 LE expr5 .)
    ]               reduce using rule 54 (expr4 -> expr4 LE expr5 .)
    ,               reduce using rule 54 (expr4 -> expr4 LE expr5 .)
    }               reduce using rule 54 (expr4 -> expr4 LE expr5 .)
    )               reduce using rule 54 (expr4 -> expr4 LE expr5 .)
    -               shift and go to state 98
    +               shift and go to state 99


state 140

    (55) expr4 -> expr4 LT expr5 .
    (59) expr5 -> expr5 . - expr6
    (60) expr5 -> expr5 . + expr6
    GE              reduce using rule 55 (expr4 -> expr4 LT expr5 .)
    GT              reduce using rule 55 (expr4 -> expr4 LT expr5 .)
    LE              reduce using rule 55 (expr4 -> expr4 LT expr5 .)
    LT              reduce using rule 55 (expr4 -> expr4 LT expr5 .)
    NEQ             reduce using rule 55 (expr4 -> expr4 LT expr5 .)
    EQ              reduce using rule 55 (expr4 -> expr4 LT expr5 .)
    LAND            reduce using rule 55 (expr4 -> expr4 LT expr5 .)
    LOR             reduce using rule 55 (expr4 -> expr4 LT expr5 .)
    ;               reduce using rule 55 (expr4 -> expr4 LT expr5 .)
    ]               reduce using rule 55 (expr4 -> expr4 LT expr5 .)
    ,               reduce using rule 55 (expr4 -> expr4 LT expr5 .)
    }               reduce using rule 55 (expr4 -> expr4 LT expr5 .)
    )               reduce using rule 55 (expr4 -> expr4 LT expr5 .)
    -               shift and go to state 98
    +               shift and go to state 99


state 141

    (56) expr4 -> expr4 NEQ expr5 .
    (59) expr5 -> expr5 . - expr6
    (60) expr5 -> expr5 . + expr6
    GE              reduce using rule 56 (expr4 -> expr4 NEQ expr5 .)
    GT              reduce using rule 56 (expr4 -> expr4 NEQ expr5 .)
    LE              reduce using rule 56 (expr4 -> expr4 NEQ expr5 .)
    LT              reduce using rule 56 (expr4 -> expr4 NEQ expr5 .)
    NEQ             reduce using rule 56 (expr4 -> expr4 NEQ expr5 .)
    EQ              reduce using rule 56 (expr4 -> expr4 NEQ expr5 .)
    LAND            reduce using rule 56 (expr4 -> expr4 NEQ expr5 .)
    LOR             reduce using rule 56 (expr4 -> expr4 NEQ expr5 .)
    ;               reduce using rule 56 (expr4 -> expr4 NEQ expr5 .)
    ]               reduce using rule 56 (expr4 -> expr4 NEQ expr5 .)
    ,               reduce using rule 56 (expr4 -> expr4 NEQ expr5 .)
    }               reduce using rule 56 (expr4 -> expr4 NEQ expr5 .)
    )               reduce using rule 56 (expr4 -> expr4 NEQ expr5 .)
    -               shift and go to state 98
    +               shift and go to state 99


state 142

    (57) expr4 -> expr4 EQ expr5 .
    (59) expr5 -> expr5 . - expr6
    (60) expr5 -> expr5 . + expr6
    GE              reduce using rule 57 (expr4 -> expr4 EQ expr5 .)
    GT              reduce using rule 57 (expr4 -> expr4 EQ expr5 .)
    LE              reduce using rule 57 (expr4 -> expr4 EQ expr5 .)
    LT              reduce using rule 57 (expr4 -> expr4 EQ expr5 .)
    NEQ             reduce using rule 57 (expr4 -> expr4 EQ expr5 .)
    EQ              reduce using rule 57 (expr4 -> expr4 EQ expr5 .)
    LAND            reduce using rule 57 (expr4 -> expr4 EQ expr5 .)
    LOR             reduce using rule 57 (expr4 -> expr4 EQ expr5 .)
    ;               reduce using rule 57 (expr4 -> expr4 EQ expr5 .)
    ]               reduce using rule 57 (expr4 -> expr4 EQ expr5 .)
    ,               reduce using rule 57 (expr4 -> expr4 EQ expr5 .)
    }               reduce using rule 57 (expr4 -> expr4 EQ expr5 .)
    )               reduce using rule 57 (expr4 -> expr4 EQ expr5 .)
    -               shift and go to state 98
    +               shift and go to state 99


state 143

    (59) expr5 -> expr5 - expr6 .
    (62) expr6 -> expr6 . % expr7
    (63) expr6 -> expr6 . / expr7
    (64) expr6 -> expr6 . * expr7
    -               reduce using rule 59 (expr5 -> expr5 - expr6 .)
    +               reduce using rule 59 (expr5 -> expr5 - expr6 .)
    GE              reduce using rule 59 (expr5 -> expr5 - expr6 .)
    GT              reduce using rule 59 (expr5 -> expr5 - expr6 .)
    LE              reduce using rule 59 (expr5 -> expr5 - expr6 .)
    LT              reduce using rule 59 (expr5 -> expr5 - expr6 .)
    NEQ             reduce using rule 59 (expr5 -> expr5 - expr6 .)
    EQ              reduce using rule 59 (expr5 -> expr5 - expr6 .)
    LAND            reduce using rule 59 (expr5 -> expr5 - expr6 .)
    LOR             reduce using rule 59 (expr5 -> expr5 - expr6 .)
    ;               reduce using rule 59 (expr5 -> expr5 - expr6 .)
    ]               reduce using rule 59 (expr5 -> expr5 - expr6 .)
    ,               reduce using rule 59 (expr5 -> expr5 - expr6 .)
    }               reduce using rule 59 (expr5 -> expr5 - expr6 .)
    )               reduce using rule 59 (expr5 -> expr5 - expr6 .)
    %               shift and go to state 100
    /               shift and go to state 101
    *               shift and go to state 102


state 144

    (60) expr5 -> expr5 + expr6 .
    (62) expr6 -> expr6 . % expr7
    (63) expr6 -> expr6 . / expr7
    (64) expr6 -> expr6 . * expr7
    -               reduce using rule 60 (expr5 -> expr5 + expr6 .)
    +               reduce using rule 60 (expr5 -> expr5 + expr6 .)
    GE              reduce using rule 60 (expr5 -> expr5 + expr6 .)
    GT              reduce using rule 60 (expr5 -> expr5 + expr6 .)
    LE              reduce using rule 60 (expr5 -> expr5 + expr6 .)
    LT              reduce using rule 60 (expr5 -> expr5 + expr6 .)
    NEQ             reduce using rule 60 (expr5 -> expr5 + expr6 .)
    EQ              reduce using rule 60 (expr5 -> expr5 + expr6 .)
    LAND            reduce using rule 60 (expr5 -> expr5 + expr6 .)
    LOR             reduce using rule 60 (expr5 -> expr5 + expr6 .)
    ;               reduce using rule 60 (expr5 -> expr5 + expr6 .)
    ]               reduce using rule 60 (expr5 -> expr5 + expr6 .)
    ,               reduce using rule 60 (expr5 -> expr5 + expr6 .)
    }               reduce using rule 60 (expr5 -> expr5 + expr6 .)
    )               reduce using rule 60 (expr5 -> expr5 + expr6 .)
    %               shift and go to state 100
    /               shift and go to state 101
    *               shift and go to state 102


state 145

    (62) expr6 -> expr6 % expr7 .
    (66) expr7 -> expr7 . ^ expr8
    %               reduce using rule 62 (expr6 -> expr6 % expr7 .)
    /               reduce using rule 62 (expr6 -> expr6 % expr7 .)
    *               reduce using rule 62 (expr6 -> expr6 % expr7 .)
    -               reduce using rule 62 (expr6 -> expr6 % expr7 .)
    +               reduce using rule 62 (expr6 -> expr6 % expr7 .)
    GE              reduce using rule 62 (expr6 -> expr6 % expr7 .)
    GT              reduce using rule 62 (expr6 -> expr6 % expr7 .)
    LE              reduce using rule 62 (expr6 -> expr6 % expr7 .)
    LT              reduce using rule 62 (expr6 -> expr6 % expr7 .)
    NEQ             reduce using rule 62 (expr6 -> expr6 % expr7 .)
    EQ              reduce using rule 62 (expr6 -> expr6 % expr7 .)
    LAND            reduce using rule 62 (expr6 -> expr6 % expr7 .)
    LOR             reduce using rule 62 (expr6 -> expr6 % expr7 .)
    ;               reduce using rule 62 (expr6 -> expr6 % expr7 .)
    ]               reduce using rule 62 (expr6 -> expr6 % expr7 .)
    ,               reduce using rule 62 (expr6 -> expr6 % expr7 .)
    }               reduce using rule 62 (expr6 -> expr6 % expr7 .)
    )               reduce using rule 62 (expr6 -> expr6 % expr7 .)
    ^               shift and go to state 105


state 146

    (63) expr6 -> expr6 / expr7 .
    (66) expr7 -> expr7 . ^ expr8
    %               reduce using rule 63 (expr6 -> expr6 / expr7 .)
    /               reduce using rule 63 (expr6 -> expr6 / expr7 .)
    *               reduce using rule 63 (expr6 -> expr6 / expr7 .)
    -               reduce using rule 63 (expr6 -> expr6 / expr7 .)
    +               reduce using rule 63 (expr6 -> expr6 / expr7 .)
    GE              reduce using rule 63 (expr6 -> expr6 / expr7 .)
    GT              reduce using rule 63 (expr6 -> expr6 / expr7 .)
    LE              reduce using rule 63 (expr6 -> expr6 / expr7 .)
    LT              reduce using rule 63 (expr6 -> expr6 / expr7 .)
    NEQ             reduce using rule 63 (expr6 -> expr6 / expr7 .)
    EQ              reduce using rule 63 (expr6 -> expr6 / expr7 .)
    LAND            reduce using rule 63 (expr6 -> expr6 / expr7 .)
    LOR             reduce using rule 63 (expr6 -> expr6 / expr7 .)
    ;               reduce using rule 63 (expr6 -> expr6 / expr7 .)
    ]               reduce using rule 63 (expr6 -> expr6 / expr7 .)
    ,               reduce using rule 63 (expr6 -> expr6 / expr7 .)
    }               reduce using rule 63 (expr6 -> expr6 / expr7 .)
    )               reduce using rule 63 (expr6 -> expr6 / expr7 .)
    ^               shift and go to state 105


state 147

    (64) expr6 -> expr6 * expr7 .
    (66) expr7 -> expr7 . ^ expr8
    %               reduce using rule 64 (expr6 -> expr6 * expr7 .)
    /               reduce using rule 64 (expr6 -> expr6 * expr7 .)
    *               reduce using rule 64 (expr6 -> expr6 * expr7 .)
    -               reduce using rule 64 (expr6 -> expr6 * expr7 .)
    +               reduce using rule 64 (expr6 -> expr6 * expr7 .)
    GE              reduce using rule 64 (expr6 -> expr6 * expr7 .)
    GT              reduce using rule 64 (expr6 -> expr6 * expr7 .)
    LE              reduce using rule 64 (expr6 -> expr6 * expr7 .)
    LT              reduce using rule 64 (expr6 -> expr6 * expr7 .)
    NEQ             reduce using rule 64 (expr6 -> expr6 * expr7 .)
    EQ              reduce using rule 64 (expr6 -> expr6 * expr7 .)
    LAND            reduce using rule 64 (expr6 -> expr6 * expr7 .)
    LOR             reduce using rule 64 (expr6 -> expr6 * expr7 .)
    ;               reduce using rule 64 (expr6 -> expr6 * expr7 .)
    ]               reduce using rule 64 (expr6 -> expr6 * expr7 .)
    ,               reduce using rule 64 (expr6 -> expr6 * expr7 .)
    }               reduce using rule 64 (expr6 -> expr6 * expr7 .)
    )               reduce using rule 64 (expr6 -> expr6 * expr7 .)
    ^               shift and go to state 105


state 148

    (74) group -> ID index .
    DEC             reduce using rule 74 (group -> ID index .)
    INC             reduce using rule 74 (group -> ID index .)
    ^               reduce using rule 74 (group -> ID index .)
    %               reduce using rule 74 (group -> ID index .)
    /               reduce using rule 74 (group -> ID index .)
    *               reduce using rule 74 (group -> ID index .)
    -               reduce using rule 74 (group -> ID index .)
    +               reduce using rule 74 (group -> ID index .)
    GE              reduce using rule 74 (group -> ID index .)
    GT              reduce using rule 74 (group -> ID index .)
    LE              reduce using rule 74 (group -> ID index .)
    LT              reduce using rule 74 (group -> ID index .)
    NEQ             reduce using rule 74 (group -> ID index .)
    EQ              reduce using rule 74 (group -> ID index .)
    LAND            reduce using rule 74 (group -> ID index .)
    LOR             reduce using rule 74 (group -> ID index .)
    ;               reduce using rule 74 (group -> ID index .)
    ]               reduce using rule 74 (group -> ID index .)
    ,               reduce using rule 74 (group -> ID index .)
    }               reduce using rule 74 (group -> ID index .)
    )               reduce using rule 74 (group -> ID index .)


state 149

    (66) expr7 -> expr7 ^ expr8 .
    ^               reduce using rule 66 (expr7 -> expr7 ^ expr8 .)
    %               reduce using rule 66 (expr7 -> expr7 ^ expr8 .)
    /               reduce using rule 66 (expr7 -> expr7 ^ expr8 .)
    *               reduce using rule 66 (expr7 -> expr7 ^ expr8 .)
    -               reduce using rule 66 (expr7 -> expr7 ^ expr8 .)
    +               reduce using rule 66 (expr7 -> expr7 ^ expr8 .)
    GE              reduce using rule 66 (expr7 -> expr7 ^ expr8 .)
    GT              reduce using rule 66 (expr7 -> expr7 ^ expr8 .)
    LE              reduce using rule 66 (expr7 -> expr7 ^ expr8 .)
    LT              reduce using rule 66 (expr7 -> expr7 ^ expr8 .)
    NEQ             reduce using rule 66 (expr7 -> expr7 ^ expr8 .)
    EQ              reduce using rule 66 (expr7 -> expr7 ^ expr8 .)
    LAND            reduce using rule 66 (expr7 -> expr7 ^ expr8 .)
    LOR             reduce using rule 66 (expr7 -> expr7 ^ expr8 .)
    ;               reduce using rule 66 (expr7 -> expr7 ^ expr8 .)
    ]               reduce using rule 66 (expr7 -> expr7 ^ expr8 .)
    ,               reduce using rule 66 (expr7 -> expr7 ^ expr8 .)
    }               reduce using rule 66 (expr7 -> expr7 ^ expr8 .)
    )               reduce using rule 66 (expr7 -> expr7 ^ expr8 .)


state 150

    (76) group -> ( expr ) .
    DEC             reduce using rule 76 (group -> ( expr ) .)
    INC             reduce using rule 76 (group -> ( expr ) .)
    ^               reduce using rule 76 (group -> ( expr ) .)
    %               reduce using rule 76 (group -> ( expr ) .)
    /               reduce using rule 76 (group -> ( expr ) .)
    *               reduce using rule 76 (group -> ( expr ) .)
    -               reduce using rule 76 (group -> ( expr ) .)
    +               reduce using rule 76 (group -> ( expr ) .)
    GE              reduce using rule 76 (group -> ( expr ) .)
    GT              reduce using rule 76 (group -> ( expr ) .)
    LE              reduce using rule 76 (group -> ( expr ) .)
    LT              reduce using rule 76 (group -> ( expr ) .)
    NEQ             reduce using rule 76 (group -> ( expr ) .)
    EQ              reduce using rule 76 (group -> ( expr ) .)
    LAND            reduce using rule 76 (group -> ( expr ) .)
    LOR             reduce using rule 76 (group -> ( expr ) .)
    ;               reduce using rule 76 (group -> ( expr ) .)
    ]               reduce using rule 76 (group -> ( expr ) .)
    ,               reduce using rule 76 (group -> ( expr ) .)
    }               reduce using rule 76 (group -> ( expr ) .)
    )               reduce using rule 76 (group -> ( expr ) .)


state 151

    (95) type_func -> FUNCTION type_array_sized ( opt_param_list ) .
    ;               reduce using rule 95 (type_func -> FUNCTION type_array_sized ( opt_param_list ) .)
    ASSIGN          reduce using rule 95 (type_func -> FUNCTION type_array_sized ( opt_param_list ) .)


state 152

    (100) param_list -> param_list , . param
    (101) param -> . ID : type_array_sized
    (102) param -> . ID : type_array
    (103) param -> . ID : type_simple
    ID              shift and go to state 114

    param                          shift and go to state 164

state 153

    (101) param -> ID : . type_array_sized
    (102) param -> ID : . type_array
    (103) param -> ID : . type_simple
    (93) type_array_sized -> . ARRAY index type_array_sized
    (94) type_array_sized -> . ARRAY index type_simple
    (91) type_array -> . ARRAY [ ] type_array
    (92) type_array -> . ARRAY [ ] type_simple
    (85) type_simple -> . VOID
    (86) type_simple -> . STRING
    (87) type_simple -> . CHAR
    (88) type_simple -> . BOOLEAN
    (89) type_simple -> . FLOAT
    (90) type_simple -> . INTEGER
    ARRAY           shift and go to state 168
    VOID            shift and go to state 14
    STRING          shift and go to state 15
    CHAR            shift and go to state 16
    BOOLEAN         shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    type_array_sized               shift and go to state 165
    type_array                     shift and go to state 166
    type_simple                    shift and go to state 167

state 154

    (96) type_func -> FUNCTION type_simple ( opt_param_list ) .
    ;               reduce using rule 96 (type_func -> FUNCTION type_simple ( opt_param_list ) .)
    ASSIGN          reduce using rule 96 (type_func -> FUNCTION type_simple ( opt_param_list ) .)


state 155

    (35) block_stmt -> { stmt_list } .
    {               reduce using rule 35 (block_stmt -> { stmt_list } .)
    RETURN          reduce using rule 35 (block_stmt -> { stmt_list } .)
    PRINT           reduce using rule 35 (block_stmt -> { stmt_list } .)
    FOR             reduce using rule 35 (block_stmt -> { stmt_list } .)
    IF              reduce using rule 35 (block_stmt -> { stmt_list } .)
    ID              reduce using rule 35 (block_stmt -> { stmt_list } .)
    !               reduce using rule 35 (block_stmt -> { stmt_list } .)
    -               reduce using rule 35 (block_stmt -> { stmt_list } .)
    (               reduce using rule 35 (block_stmt -> { stmt_list } .)
    FALSE           reduce using rule 35 (block_stmt -> { stmt_list } .)
    TRUE            reduce using rule 35 (block_stmt -> { stmt_list } .)
    STRING_LITERAL  reduce using rule 35 (block_stmt -> { stmt_list } .)
    CHAR_LITERAL    reduce using rule 35 (block_stmt -> { stmt_list } .)
    FLOAT_LITERAL   reduce using rule 35 (block_stmt -> { stmt_list } .)
    INTEGER_LITERAL reduce using rule 35 (block_stmt -> { stmt_list } .)
    }               reduce using rule 35 (block_stmt -> { stmt_list } .)
    ELSE            reduce using rule 35 (block_stmt -> { stmt_list } .)


state 156

    (23) if_stmt_closed -> if_cond closed_stmt ELSE . closed_stmt
    (24) if_stmt_open -> if_cond closed_stmt ELSE . if_stmt_open
    (17) closed_stmt -> . simple_stmt
    (18) closed_stmt -> . for_stmt_closed
    (19) closed_stmt -> . if_stmt_closed
    (24) if_stmt_open -> . if_cond closed_stmt ELSE if_stmt_open
    (25) if_stmt_open -> . if_cond stmt
    (29) simple_stmt -> . expr ;
    (30) simple_stmt -> . block_stmt
    (31) simple_stmt -> . return_stmt
    (32) simple_stmt -> . print_stmt
    (28) for_stmt_closed -> . for_header closed_stmt
    (23) if_stmt_closed -> . if_cond closed_stmt ELSE closed_stmt
    (22) if_cond -> . IF ( opt_expr )
    (42) expr -> . expr1
    (35) block_stmt -> . { stmt_list }
    (34) return_stmt -> . RETURN opt_expr ;
    (33) print_stmt -> . PRINT opt_expr_list ;
    (26) for_header -> . FOR ( opt_expr ; opt_expr ; opt_expr )
    (43) expr1 -> . expr2
    (44) expr1 -> . lval ASSIGN expr1
    (47) expr2 -> . expr3
    (48) expr2 -> . expr2 LOR expr3
    (45) lval -> . ID index
    (46) lval -> . ID
    (49) expr3 -> . expr4
    (50) expr3 -> . expr3 LAND expr4
    (51) expr4 -> . expr5
    (52) expr4 -> . expr4 GE expr5
    (53) expr4 -> . expr4 GT expr5
    (54) expr4 -> . expr4 LE expr5
    (55) expr4 -> . expr4 LT expr5
    (56) expr4 -> . expr4 NEQ expr5
    (57) expr4 -> . expr4 EQ expr5
    (58) expr5 -> . expr6
    (59) expr5 -> . expr5 - expr6
    (60) expr5 -> . expr5 + expr6
    (61) expr6 -> . expr7
    (62) expr6 -> . expr6 % expr7
    (63) expr6 -> . expr6 / expr7
    (64) expr6 -> . expr6 * expr7
    (65) expr7 -> . expr8
    (66) expr7 -> . expr7 ^ expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    IF              shift and go to state 81
    {               shift and go to state 60
    RETURN          shift and go to state 78
    PRINT           shift and go to state 79
    FOR             shift and go to state 80
    ID              shift and go to state 32
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    if_cond                        shift and go to state 169
    closed_stmt                    shift and go to state 170
    if_stmt_open                   shift and go to state 171
    simple_stmt                    shift and go to state 67
    for_stmt_closed                shift and go to state 68
    if_stmt_closed                 shift and go to state 69
    expr                           shift and go to state 72
    block_stmt                     shift and go to state 73
    return_stmt                    shift and go to state 74
    print_stmt                     shift and go to state 75
    for_header                     shift and go to state 172
    expr1                          shift and go to state 34
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 157

    (34) return_stmt -> RETURN opt_expr ; .
    {               reduce using rule 34 (return_stmt -> RETURN opt_expr ; .)
    RETURN          reduce using rule 34 (return_stmt -> RETURN opt_expr ; .)
    PRINT           reduce using rule 34 (return_stmt -> RETURN opt_expr ; .)
    FOR             reduce using rule 34 (return_stmt -> RETURN opt_expr ; .)
    IF              reduce using rule 34 (return_stmt -> RETURN opt_expr ; .)
    ID              reduce using rule 34 (return_stmt -> RETURN opt_expr ; .)
    !               reduce using rule 34 (return_stmt -> RETURN opt_expr ; .)
    -               reduce using rule 34 (return_stmt -> RETURN opt_expr ; .)
    (               reduce using rule 34 (return_stmt -> RETURN opt_expr ; .)
    FALSE           reduce using rule 34 (return_stmt -> RETURN opt_expr ; .)
    TRUE            reduce using rule 34 (return_stmt -> RETURN opt_expr ; .)
    STRING_LITERAL  reduce using rule 34 (return_stmt -> RETURN opt_expr ; .)
    CHAR_LITERAL    reduce using rule 34 (return_stmt -> RETURN opt_expr ; .)
    FLOAT_LITERAL   reduce using rule 34 (return_stmt -> RETURN opt_expr ; .)
    INTEGER_LITERAL reduce using rule 34 (return_stmt -> RETURN opt_expr ; .)
    }               reduce using rule 34 (return_stmt -> RETURN opt_expr ; .)
    ELSE            reduce using rule 34 (return_stmt -> RETURN opt_expr ; .)


state 158

    (33) print_stmt -> PRINT opt_expr_list ; .
    {               reduce using rule 33 (print_stmt -> PRINT opt_expr_list ; .)
    RETURN          reduce using rule 33 (print_stmt -> PRINT opt_expr_list ; .)
    PRINT           reduce using rule 33 (print_stmt -> PRINT opt_expr_list ; .)
    FOR             reduce using rule 33 (print_stmt -> PRINT opt_expr_list ; .)
    IF              reduce using rule 33 (print_stmt -> PRINT opt_expr_list ; .)
    ID              reduce using rule 33 (print_stmt -> PRINT opt_expr_list ; .)
    !               reduce using rule 33 (print_stmt -> PRINT opt_expr_list ; .)
    -               reduce using rule 33 (print_stmt -> PRINT opt_expr_list ; .)
    (               reduce using rule 33 (print_stmt -> PRINT opt_expr_list ; .)
    FALSE           reduce using rule 33 (print_stmt -> PRINT opt_expr_list ; .)
    TRUE            reduce using rule 33 (print_stmt -> PRINT opt_expr_list ; .)
    STRING_LITERAL  reduce using rule 33 (print_stmt -> PRINT opt_expr_list ; .)
    CHAR_LITERAL    reduce using rule 33 (print_stmt -> PRINT opt_expr_list ; .)
    FLOAT_LITERAL   reduce using rule 33 (print_stmt -> PRINT opt_expr_list ; .)
    INTEGER_LITERAL reduce using rule 33 (print_stmt -> PRINT opt_expr_list ; .)
    }               reduce using rule 33 (print_stmt -> PRINT opt_expr_list ; .)
    ELSE            reduce using rule 33 (print_stmt -> PRINT opt_expr_list ; .)


state 159

    (26) for_header -> FOR ( opt_expr . ; opt_expr ; opt_expr )
    ;               shift and go to state 173


state 160

    (22) if_cond -> IF ( opt_expr . )
    )               shift and go to state 174


state 161

    (9) decl_init -> ID : type_array_sized ASSIGN { opt_expr_list } ; .
    ID              reduce using rule 9 (decl_init -> ID : type_array_sized ASSIGN { opt_expr_list } ; .)
    $end            reduce using rule 9 (decl_init -> ID : type_array_sized ASSIGN { opt_expr_list } ; .)


state 162

    (39) expr_list -> expr , expr_list .
    }               reduce using rule 39 (expr_list -> expr , expr_list .)
    ;               reduce using rule 39 (expr_list -> expr , expr_list .)
    )               reduce using rule 39 (expr_list -> expr , expr_list .)


state 163

    (75) group -> ID ( opt_expr_list ) .
    DEC             reduce using rule 75 (group -> ID ( opt_expr_list ) .)
    INC             reduce using rule 75 (group -> ID ( opt_expr_list ) .)
    ^               reduce using rule 75 (group -> ID ( opt_expr_list ) .)
    %               reduce using rule 75 (group -> ID ( opt_expr_list ) .)
    /               reduce using rule 75 (group -> ID ( opt_expr_list ) .)
    *               reduce using rule 75 (group -> ID ( opt_expr_list ) .)
    -               reduce using rule 75 (group -> ID ( opt_expr_list ) .)
    +               reduce using rule 75 (group -> ID ( opt_expr_list ) .)
    GE              reduce using rule 75 (group -> ID ( opt_expr_list ) .)
    GT              reduce using rule 75 (group -> ID ( opt_expr_list ) .)
    LE              reduce using rule 75 (group -> ID ( opt_expr_list ) .)
    LT              reduce using rule 75 (group -> ID ( opt_expr_list ) .)
    NEQ             reduce using rule 75 (group -> ID ( opt_expr_list ) .)
    EQ              reduce using rule 75 (group -> ID ( opt_expr_list ) .)
    LAND            reduce using rule 75 (group -> ID ( opt_expr_list ) .)
    LOR             reduce using rule 75 (group -> ID ( opt_expr_list ) .)
    ;               reduce using rule 75 (group -> ID ( opt_expr_list ) .)
    ]               reduce using rule 75 (group -> ID ( opt_expr_list ) .)
    ,               reduce using rule 75 (group -> ID ( opt_expr_list ) .)
    }               reduce using rule 75 (group -> ID ( opt_expr_list ) .)
    )               reduce using rule 75 (group -> ID ( opt_expr_list ) .)


state 164

    (100) param_list -> param_list , param .
    ,               reduce using rule 100 (param_list -> param_list , param .)
    )               reduce using rule 100 (param_list -> param_list , param .)


state 165

    (101) param -> ID : type_array_sized .
    ,               reduce using rule 101 (param -> ID : type_array_sized .)
    )               reduce using rule 101 (param -> ID : type_array_sized .)


state 166

    (102) param -> ID : type_array .
    ,               reduce using rule 102 (param -> ID : type_array .)
    )               reduce using rule 102 (param -> ID : type_array .)


state 167

    (103) param -> ID : type_simple .
    ,               reduce using rule 103 (param -> ID : type_simple .)
    )               reduce using rule 103 (param -> ID : type_simple .)


state 168

    (93) type_array_sized -> ARRAY . index type_array_sized
    (94) type_array_sized -> ARRAY . index type_simple
    (91) type_array -> ARRAY . [ ] type_array
    (92) type_array -> ARRAY . [ ] type_simple
    (77) index -> . [ expr ]
    [               shift and go to state 175

    index                          shift and go to state 28

state 169

    (24) if_stmt_open -> if_cond . closed_stmt ELSE if_stmt_open
    (25) if_stmt_open -> if_cond . stmt
    (23) if_stmt_closed -> if_cond . closed_stmt ELSE closed_stmt
    (17) closed_stmt -> . simple_stmt
    (18) closed_stmt -> . for_stmt_closed
    (19) closed_stmt -> . if_stmt_closed
    (15) stmt -> . closed_stmt
    (16) stmt -> . open_stmt
    (29) simple_stmt -> . expr ;
    (30) simple_stmt -> . block_stmt
    (31) simple_stmt -> . return_stmt
    (32) simple_stmt -> . print_stmt
    (28) for_stmt_closed -> . for_header closed_stmt
    (23) if_stmt_closed -> . if_cond closed_stmt ELSE closed_stmt
    (20) open_stmt -> . for_stmt_open
    (21) open_stmt -> . if_stmt_open
    (42) expr -> . expr1
    (35) block_stmt -> . { stmt_list }
    (34) return_stmt -> . RETURN opt_expr ;
    (33) print_stmt -> . PRINT opt_expr_list ;
    (26) for_header -> . FOR ( opt_expr ; opt_expr ; opt_expr )
    (22) if_cond -> . IF ( opt_expr )
    (27) for_stmt_open -> . for_header open_stmt
    (24) if_stmt_open -> . if_cond closed_stmt ELSE if_stmt_open
    (25) if_stmt_open -> . if_cond stmt
    (43) expr1 -> . expr2
    (44) expr1 -> . lval ASSIGN expr1
    (47) expr2 -> . expr3
    (48) expr2 -> . expr2 LOR expr3
    (45) lval -> . ID index
    (46) lval -> . ID
    (49) expr3 -> . expr4
    (50) expr3 -> . expr3 LAND expr4
    (51) expr4 -> . expr5
    (52) expr4 -> . expr4 GE expr5
    (53) expr4 -> . expr4 GT expr5
    (54) expr4 -> . expr4 LE expr5
    (55) expr4 -> . expr4 LT expr5
    (56) expr4 -> . expr4 NEQ expr5
    (57) expr4 -> . expr4 EQ expr5
    (58) expr5 -> . expr6
    (59) expr5 -> . expr5 - expr6
    (60) expr5 -> . expr5 + expr6
    (61) expr6 -> . expr7
    (62) expr6 -> . expr6 % expr7
    (63) expr6 -> . expr6 / expr7
    (64) expr6 -> . expr6 * expr7
    (65) expr7 -> . expr8
    (66) expr7 -> . expr7 ^ expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    {               shift and go to state 60
    RETURN          shift and go to state 78
    PRINT           shift and go to state 79
    FOR             shift and go to state 80
    IF              shift and go to state 81
    ID              shift and go to state 32
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    if_cond                        shift and go to state 77
    closed_stmt                    shift and go to state 176
    if_stmt_open                   shift and go to state 71
    stmt                           shift and go to state 124
    simple_stmt                    shift and go to state 67
    for_stmt_closed                shift and go to state 68
    if_stmt_closed                 shift and go to state 69
    open_stmt                      shift and go to state 66
    expr                           shift and go to state 72
    block_stmt                     shift and go to state 73
    return_stmt                    shift and go to state 74
    print_stmt                     shift and go to state 75
    for_header                     shift and go to state 76
    for_stmt_open                  shift and go to state 70
    expr1                          shift and go to state 34
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 170

    (23) if_stmt_closed -> if_cond closed_stmt ELSE closed_stmt .
    {               reduce using rule 23 (if_stmt_closed -> if_cond closed_stmt ELSE closed_stmt .)
    RETURN          reduce using rule 23 (if_stmt_closed -> if_cond closed_stmt ELSE closed_stmt .)
    PRINT           reduce using rule 23 (if_stmt_closed -> if_cond closed_stmt ELSE closed_stmt .)
    FOR             reduce using rule 23 (if_stmt_closed -> if_cond closed_stmt ELSE closed_stmt .)
    IF              reduce using rule 23 (if_stmt_closed -> if_cond closed_stmt ELSE closed_stmt .)
    ID              reduce using rule 23 (if_stmt_closed -> if_cond closed_stmt ELSE closed_stmt .)
    !               reduce using rule 23 (if_stmt_closed -> if_cond closed_stmt ELSE closed_stmt .)
    -               reduce using rule 23 (if_stmt_closed -> if_cond closed_stmt ELSE closed_stmt .)
    (               reduce using rule 23 (if_stmt_closed -> if_cond closed_stmt ELSE closed_stmt .)
    FALSE           reduce using rule 23 (if_stmt_closed -> if_cond closed_stmt ELSE closed_stmt .)
    TRUE            reduce using rule 23 (if_stmt_closed -> if_cond closed_stmt ELSE closed_stmt .)
    STRING_LITERAL  reduce using rule 23 (if_stmt_closed -> if_cond closed_stmt ELSE closed_stmt .)
    CHAR_LITERAL    reduce using rule 23 (if_stmt_closed -> if_cond closed_stmt ELSE closed_stmt .)
    FLOAT_LITERAL   reduce using rule 23 (if_stmt_closed -> if_cond closed_stmt ELSE closed_stmt .)
    INTEGER_LITERAL reduce using rule 23 (if_stmt_closed -> if_cond closed_stmt ELSE closed_stmt .)
    }               reduce using rule 23 (if_stmt_closed -> if_cond closed_stmt ELSE closed_stmt .)
    ELSE            reduce using rule 23 (if_stmt_closed -> if_cond closed_stmt ELSE closed_stmt .)


state 171

    (24) if_stmt_open -> if_cond closed_stmt ELSE if_stmt_open .
    {               reduce using rule 24 (if_stmt_open -> if_cond closed_stmt ELSE if_stmt_open .)
    RETURN          reduce using rule 24 (if_stmt_open -> if_cond closed_stmt ELSE if_stmt_open .)
    PRINT           reduce using rule 24 (if_stmt_open -> if_cond closed_stmt ELSE if_stmt_open .)
    FOR             reduce using rule 24 (if_stmt_open -> if_cond closed_stmt ELSE if_stmt_open .)
    IF              reduce using rule 24 (if_stmt_open -> if_cond closed_stmt ELSE if_stmt_open .)
    ID              reduce using rule 24 (if_stmt_open -> if_cond closed_stmt ELSE if_stmt_open .)
    !               reduce using rule 24 (if_stmt_open -> if_cond closed_stmt ELSE if_stmt_open .)
    -               reduce using rule 24 (if_stmt_open -> if_cond closed_stmt ELSE if_stmt_open .)
    (               reduce using rule 24 (if_stmt_open -> if_cond closed_stmt ELSE if_stmt_open .)
    FALSE           reduce using rule 24 (if_stmt_open -> if_cond closed_stmt ELSE if_stmt_open .)
    TRUE            reduce using rule 24 (if_stmt_open -> if_cond closed_stmt ELSE if_stmt_open .)
    STRING_LITERAL  reduce using rule 24 (if_stmt_open -> if_cond closed_stmt ELSE if_stmt_open .)
    CHAR_LITERAL    reduce using rule 24 (if_stmt_open -> if_cond closed_stmt ELSE if_stmt_open .)
    FLOAT_LITERAL   reduce using rule 24 (if_stmt_open -> if_cond closed_stmt ELSE if_stmt_open .)
    INTEGER_LITERAL reduce using rule 24 (if_stmt_open -> if_cond closed_stmt ELSE if_stmt_open .)
    }               reduce using rule 24 (if_stmt_open -> if_cond closed_stmt ELSE if_stmt_open .)


state 172

    (28) for_stmt_closed -> for_header . closed_stmt
    (17) closed_stmt -> . simple_stmt
    (18) closed_stmt -> . for_stmt_closed
    (19) closed_stmt -> . if_stmt_closed
    (29) simple_stmt -> . expr ;
    (30) simple_stmt -> . block_stmt
    (31) simple_stmt -> . return_stmt
    (32) simple_stmt -> . print_stmt
    (28) for_stmt_closed -> . for_header closed_stmt
    (23) if_stmt_closed -> . if_cond closed_stmt ELSE closed_stmt
    (42) expr -> . expr1
    (35) block_stmt -> . { stmt_list }
    (34) return_stmt -> . RETURN opt_expr ;
    (33) print_stmt -> . PRINT opt_expr_list ;
    (26) for_header -> . FOR ( opt_expr ; opt_expr ; opt_expr )
    (22) if_cond -> . IF ( opt_expr )
    (43) expr1 -> . expr2
    (44) expr1 -> . lval ASSIGN expr1
    (47) expr2 -> . expr3
    (48) expr2 -> . expr2 LOR expr3
    (45) lval -> . ID index
    (46) lval -> . ID
    (49) expr3 -> . expr4
    (50) expr3 -> . expr3 LAND expr4
    (51) expr4 -> . expr5
    (52) expr4 -> . expr4 GE expr5
    (53) expr4 -> . expr4 GT expr5
    (54) expr4 -> . expr4 LE expr5
    (55) expr4 -> . expr4 LT expr5
    (56) expr4 -> . expr4 NEQ expr5
    (57) expr4 -> . expr4 EQ expr5
    (58) expr5 -> . expr6
    (59) expr5 -> . expr5 - expr6
    (60) expr5 -> . expr5 + expr6
    (61) expr6 -> . expr7
    (62) expr6 -> . expr6 % expr7
    (63) expr6 -> . expr6 / expr7
    (64) expr6 -> . expr6 * expr7
    (65) expr7 -> . expr8
    (66) expr7 -> . expr7 ^ expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    {               shift and go to state 60
    RETURN          shift and go to state 78
    PRINT           shift and go to state 79
    FOR             shift and go to state 80
    IF              shift and go to state 81
    ID              shift and go to state 32
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    for_header                     shift and go to state 172
    closed_stmt                    shift and go to state 121
    simple_stmt                    shift and go to state 67
    for_stmt_closed                shift and go to state 68
    if_stmt_closed                 shift and go to state 69
    expr                           shift and go to state 72
    block_stmt                     shift and go to state 73
    return_stmt                    shift and go to state 74
    print_stmt                     shift and go to state 75
    if_cond                        shift and go to state 177
    expr1                          shift and go to state 34
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 173

    (26) for_header -> FOR ( opt_expr ; . opt_expr ; opt_expr )
    (40) opt_expr -> . expr
    (41) opt_expr -> . empty
    (42) expr -> . expr1
    (104) empty -> .
    (43) expr1 -> . expr2
    (44) expr1 -> . lval ASSIGN expr1
    (47) expr2 -> . expr3
    (48) expr2 -> . expr2 LOR expr3
    (45) lval -> . ID index
    (46) lval -> . ID
    (49) expr3 -> . expr4
    (50) expr3 -> . expr3 LAND expr4
    (51) expr4 -> . expr5
    (52) expr4 -> . expr4 GE expr5
    (53) expr4 -> . expr4 GT expr5
    (54) expr4 -> . expr4 LE expr5
    (55) expr4 -> . expr4 LT expr5
    (56) expr4 -> . expr4 NEQ expr5
    (57) expr4 -> . expr4 EQ expr5
    (58) expr5 -> . expr6
    (59) expr5 -> . expr5 - expr6
    (60) expr5 -> . expr5 + expr6
    (61) expr6 -> . expr7
    (62) expr6 -> . expr6 % expr7
    (63) expr6 -> . expr6 / expr7
    (64) expr6 -> . expr6 * expr7
    (65) expr7 -> . expr8
    (66) expr7 -> . expr7 ^ expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    ;               reduce using rule 104 (empty -> .)
    ID              shift and go to state 32
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    opt_expr                       shift and go to state 178
    expr                           shift and go to state 126
    empty                          shift and go to state 127
    expr1                          shift and go to state 34
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 174

    (22) if_cond -> IF ( opt_expr ) .
    {               reduce using rule 22 (if_cond -> IF ( opt_expr ) .)
    RETURN          reduce using rule 22 (if_cond -> IF ( opt_expr ) .)
    PRINT           reduce using rule 22 (if_cond -> IF ( opt_expr ) .)
    FOR             reduce using rule 22 (if_cond -> IF ( opt_expr ) .)
    IF              reduce using rule 22 (if_cond -> IF ( opt_expr ) .)
    ID              reduce using rule 22 (if_cond -> IF ( opt_expr ) .)
    !               reduce using rule 22 (if_cond -> IF ( opt_expr ) .)
    -               reduce using rule 22 (if_cond -> IF ( opt_expr ) .)
    (               reduce using rule 22 (if_cond -> IF ( opt_expr ) .)
    FALSE           reduce using rule 22 (if_cond -> IF ( opt_expr ) .)
    TRUE            reduce using rule 22 (if_cond -> IF ( opt_expr ) .)
    STRING_LITERAL  reduce using rule 22 (if_cond -> IF ( opt_expr ) .)
    CHAR_LITERAL    reduce using rule 22 (if_cond -> IF ( opt_expr ) .)
    FLOAT_LITERAL   reduce using rule 22 (if_cond -> IF ( opt_expr ) .)
    INTEGER_LITERAL reduce using rule 22 (if_cond -> IF ( opt_expr ) .)


state 175

    (91) type_array -> ARRAY [ . ] type_array
    (92) type_array -> ARRAY [ . ] type_simple
    (77) index -> [ . expr ]
    (42) expr -> . expr1
    (43) expr1 -> . expr2
    (44) expr1 -> . lval ASSIGN expr1
    (47) expr2 -> . expr3
    (48) expr2 -> . expr2 LOR expr3
    (45) lval -> . ID index
    (46) lval -> . ID
    (49) expr3 -> . expr4
    (50) expr3 -> . expr3 LAND expr4
    (51) expr4 -> . expr5
    (52) expr4 -> . expr4 GE expr5
    (53) expr4 -> . expr4 GT expr5
    (54) expr4 -> . expr4 LE expr5
    (55) expr4 -> . expr4 LT expr5
    (56) expr4 -> . expr4 NEQ expr5
    (57) expr4 -> . expr4 EQ expr5
    (58) expr5 -> . expr6
    (59) expr5 -> . expr5 - expr6
    (60) expr5 -> . expr5 + expr6
    (61) expr6 -> . expr7
    (62) expr6 -> . expr6 % expr7
    (63) expr6 -> . expr6 / expr7
    (64) expr6 -> . expr6 * expr7
    (65) expr7 -> . expr8
    (66) expr7 -> . expr7 ^ expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    ]               shift and go to state 179
    ID              shift and go to state 32
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    expr                           shift and go to state 59
    expr1                          shift and go to state 34
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 176

    (24) if_stmt_open -> if_cond closed_stmt . ELSE if_stmt_open
    (23) if_stmt_closed -> if_cond closed_stmt . ELSE closed_stmt
    (15) stmt -> closed_stmt .
    ELSE            shift and go to state 180
    {               reduce using rule 15 (stmt -> closed_stmt .)
    RETURN          reduce using rule 15 (stmt -> closed_stmt .)
    PRINT           reduce using rule 15 (stmt -> closed_stmt .)
    FOR             reduce using rule 15 (stmt -> closed_stmt .)
    IF              reduce using rule 15 (stmt -> closed_stmt .)
    ID              reduce using rule 15 (stmt -> closed_stmt .)
    !               reduce using rule 15 (stmt -> closed_stmt .)
    -               reduce using rule 15 (stmt -> closed_stmt .)
    (               reduce using rule 15 (stmt -> closed_stmt .)
    FALSE           reduce using rule 15 (stmt -> closed_stmt .)
    TRUE            reduce using rule 15 (stmt -> closed_stmt .)
    STRING_LITERAL  reduce using rule 15 (stmt -> closed_stmt .)
    CHAR_LITERAL    reduce using rule 15 (stmt -> closed_stmt .)
    FLOAT_LITERAL   reduce using rule 15 (stmt -> closed_stmt .)
    INTEGER_LITERAL reduce using rule 15 (stmt -> closed_stmt .)
    }               reduce using rule 15 (stmt -> closed_stmt .)


state 177

    (23) if_stmt_closed -> if_cond . closed_stmt ELSE closed_stmt
    (17) closed_stmt -> . simple_stmt
    (18) closed_stmt -> . for_stmt_closed
    (19) closed_stmt -> . if_stmt_closed
    (29) simple_stmt -> . expr ;
    (30) simple_stmt -> . block_stmt
    (31) simple_stmt -> . return_stmt
    (32) simple_stmt -> . print_stmt
    (28) for_stmt_closed -> . for_header closed_stmt
    (23) if_stmt_closed -> . if_cond closed_stmt ELSE closed_stmt
    (42) expr -> . expr1
    (35) block_stmt -> . { stmt_list }
    (34) return_stmt -> . RETURN opt_expr ;
    (33) print_stmt -> . PRINT opt_expr_list ;
    (26) for_header -> . FOR ( opt_expr ; opt_expr ; opt_expr )
    (22) if_cond -> . IF ( opt_expr )
    (43) expr1 -> . expr2
    (44) expr1 -> . lval ASSIGN expr1
    (47) expr2 -> . expr3
    (48) expr2 -> . expr2 LOR expr3
    (45) lval -> . ID index
    (46) lval -> . ID
    (49) expr3 -> . expr4
    (50) expr3 -> . expr3 LAND expr4
    (51) expr4 -> . expr5
    (52) expr4 -> . expr4 GE expr5
    (53) expr4 -> . expr4 GT expr5
    (54) expr4 -> . expr4 LE expr5
    (55) expr4 -> . expr4 LT expr5
    (56) expr4 -> . expr4 NEQ expr5
    (57) expr4 -> . expr4 EQ expr5
    (58) expr5 -> . expr6
    (59) expr5 -> . expr5 - expr6
    (60) expr5 -> . expr5 + expr6
    (61) expr6 -> . expr7
    (62) expr6 -> . expr6 % expr7
    (63) expr6 -> . expr6 / expr7
    (64) expr6 -> . expr6 * expr7
    (65) expr7 -> . expr8
    (66) expr7 -> . expr7 ^ expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    {               shift and go to state 60
    RETURN          shift and go to state 78
    PRINT           shift and go to state 79
    FOR             shift and go to state 80
    IF              shift and go to state 81
    ID              shift and go to state 32
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    if_cond                        shift and go to state 177
    closed_stmt                    shift and go to state 181
    simple_stmt                    shift and go to state 67
    for_stmt_closed                shift and go to state 68
    if_stmt_closed                 shift and go to state 69
    expr                           shift and go to state 72
    block_stmt                     shift and go to state 73
    return_stmt                    shift and go to state 74
    print_stmt                     shift and go to state 75
    for_header                     shift and go to state 172
    expr1                          shift and go to state 34
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 178

    (26) for_header -> FOR ( opt_expr ; opt_expr . ; opt_expr )
    ;               shift and go to state 182


state 179

    (91) type_array -> ARRAY [ ] . type_array
    (92) type_array -> ARRAY [ ] . type_simple
    (91) type_array -> . ARRAY [ ] type_array
    (92) type_array -> . ARRAY [ ] type_simple
    (85) type_simple -> . VOID
    (86) type_simple -> . STRING
    (87) type_simple -> . CHAR
    (88) type_simple -> . BOOLEAN
    (89) type_simple -> . FLOAT
    (90) type_simple -> . INTEGER
    ARRAY           shift and go to state 183
    VOID            shift and go to state 14
    STRING          shift and go to state 15
    CHAR            shift and go to state 16
    BOOLEAN         shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    type_array                     shift and go to state 184
    type_simple                    shift and go to state 185

state 180

    (24) if_stmt_open -> if_cond closed_stmt ELSE . if_stmt_open
    (23) if_stmt_closed -> if_cond closed_stmt ELSE . closed_stmt
    (24) if_stmt_open -> . if_cond closed_stmt ELSE if_stmt_open
    (25) if_stmt_open -> . if_cond stmt
    (17) closed_stmt -> . simple_stmt
    (18) closed_stmt -> . for_stmt_closed
    (19) closed_stmt -> . if_stmt_closed
    (22) if_cond -> . IF ( opt_expr )
    (29) simple_stmt -> . expr ;
    (30) simple_stmt -> . block_stmt
    (31) simple_stmt -> . return_stmt
    (32) simple_stmt -> . print_stmt
    (28) for_stmt_closed -> . for_header closed_stmt
    (23) if_stmt_closed -> . if_cond closed_stmt ELSE closed_stmt
    (42) expr -> . expr1
    (35) block_stmt -> . { stmt_list }
    (34) return_stmt -> . RETURN opt_expr ;
    (33) print_stmt -> . PRINT opt_expr_list ;
    (26) for_header -> . FOR ( opt_expr ; opt_expr ; opt_expr )
    (43) expr1 -> . expr2
    (44) expr1 -> . lval ASSIGN expr1
    (47) expr2 -> . expr3
    (48) expr2 -> . expr2 LOR expr3
    (45) lval -> . ID index
    (46) lval -> . ID
    (49) expr3 -> . expr4
    (50) expr3 -> . expr3 LAND expr4
    (51) expr4 -> . expr5
    (52) expr4 -> . expr4 GE expr5
    (53) expr4 -> . expr4 GT expr5
    (54) expr4 -> . expr4 LE expr5
    (55) expr4 -> . expr4 LT expr5
    (56) expr4 -> . expr4 NEQ expr5
    (57) expr4 -> . expr4 EQ expr5
    (58) expr5 -> . expr6
    (59) expr5 -> . expr5 - expr6
    (60) expr5 -> . expr5 + expr6
    (61) expr6 -> . expr7
    (62) expr6 -> . expr6 % expr7
    (63) expr6 -> . expr6 / expr7
    (64) expr6 -> . expr6 * expr7
    (65) expr7 -> . expr8
    (66) expr7 -> . expr7 ^ expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    IF              shift and go to state 81
    {               shift and go to state 60
    RETURN          shift and go to state 78
    PRINT           shift and go to state 79
    FOR             shift and go to state 80
    ID              shift and go to state 32
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    if_cond                        shift and go to state 169
    closed_stmt                    shift and go to state 170
    if_stmt_open                   shift and go to state 171
    simple_stmt                    shift and go to state 67
    for_stmt_closed                shift and go to state 68
    if_stmt_closed                 shift and go to state 69
    expr                           shift and go to state 72
    block_stmt                     shift and go to state 73
    return_stmt                    shift and go to state 74
    print_stmt                     shift and go to state 75
    for_header                     shift and go to state 172
    expr1                          shift and go to state 34
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 181

    (23) if_stmt_closed -> if_cond closed_stmt . ELSE closed_stmt
    ELSE            shift and go to state 186


state 182

    (26) for_header -> FOR ( opt_expr ; opt_expr ; . opt_expr )
    (40) opt_expr -> . expr
    (41) opt_expr -> . empty
    (42) expr -> . expr1
    (104) empty -> .
    (43) expr1 -> . expr2
    (44) expr1 -> . lval ASSIGN expr1
    (47) expr2 -> . expr3
    (48) expr2 -> . expr2 LOR expr3
    (45) lval -> . ID index
    (46) lval -> . ID
    (49) expr3 -> . expr4
    (50) expr3 -> . expr3 LAND expr4
    (51) expr4 -> . expr5
    (52) expr4 -> . expr4 GE expr5
    (53) expr4 -> . expr4 GT expr5
    (54) expr4 -> . expr4 LE expr5
    (55) expr4 -> . expr4 LT expr5
    (56) expr4 -> . expr4 NEQ expr5
    (57) expr4 -> . expr4 EQ expr5
    (58) expr5 -> . expr6
    (59) expr5 -> . expr5 - expr6
    (60) expr5 -> . expr5 + expr6
    (61) expr6 -> . expr7
    (62) expr6 -> . expr6 % expr7
    (63) expr6 -> . expr6 / expr7
    (64) expr6 -> . expr6 * expr7
    (65) expr7 -> . expr8
    (66) expr7 -> . expr7 ^ expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    )               reduce using rule 104 (empty -> .)
    ID              shift and go to state 32
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    opt_expr                       shift and go to state 187
    expr                           shift and go to state 126
    empty                          shift and go to state 127
    expr1                          shift and go to state 34
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 183

    (91) type_array -> ARRAY . [ ] type_array
    (92) type_array -> ARRAY . [ ] type_simple
    [               shift and go to state 188


state 184

    (91) type_array -> ARRAY [ ] type_array .
    ,               reduce using rule 91 (type_array -> ARRAY [ ] type_array .)
    )               reduce using rule 91 (type_array -> ARRAY [ ] type_array .)


state 185

    (92) type_array -> ARRAY [ ] type_simple .
    ,               reduce using rule 92 (type_array -> ARRAY [ ] type_simple .)
    )               reduce using rule 92 (type_array -> ARRAY [ ] type_simple .)


state 186

    (23) if_stmt_closed -> if_cond closed_stmt ELSE . closed_stmt
    (17) closed_stmt -> . simple_stmt
    (18) closed_stmt -> . for_stmt_closed
    (19) closed_stmt -> . if_stmt_closed
    (29) simple_stmt -> . expr ;
    (30) simple_stmt -> . block_stmt
    (31) simple_stmt -> . return_stmt
    (32) simple_stmt -> . print_stmt
    (28) for_stmt_closed -> . for_header closed_stmt
    (23) if_stmt_closed -> . if_cond closed_stmt ELSE closed_stmt
    (42) expr -> . expr1
    (35) block_stmt -> . { stmt_list }
    (34) return_stmt -> . RETURN opt_expr ;
    (33) print_stmt -> . PRINT opt_expr_list ;
    (26) for_header -> . FOR ( opt_expr ; opt_expr ; opt_expr )
    (22) if_cond -> . IF ( opt_expr )
    (43) expr1 -> . expr2
    (44) expr1 -> . lval ASSIGN expr1
    (47) expr2 -> . expr3
    (48) expr2 -> . expr2 LOR expr3
    (45) lval -> . ID index
    (46) lval -> . ID
    (49) expr3 -> . expr4
    (50) expr3 -> . expr3 LAND expr4
    (51) expr4 -> . expr5
    (52) expr4 -> . expr4 GE expr5
    (53) expr4 -> . expr4 GT expr5
    (54) expr4 -> . expr4 LE expr5
    (55) expr4 -> . expr4 LT expr5
    (56) expr4 -> . expr4 NEQ expr5
    (57) expr4 -> . expr4 EQ expr5
    (58) expr5 -> . expr6
    (59) expr5 -> . expr5 - expr6
    (60) expr5 -> . expr5 + expr6
    (61) expr6 -> . expr7
    (62) expr6 -> . expr6 % expr7
    (63) expr6 -> . expr6 / expr7
    (64) expr6 -> . expr6 * expr7
    (65) expr7 -> . expr8
    (66) expr7 -> . expr7 ^ expr8
    (67) expr8 -> . expr9
    (68) expr8 -> . ! expr8
    (69) expr8 -> . - expr8
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . ID ( opt_expr_list )
    (76) group -> . ( expr )
    (78) factor -> . FALSE
    (79) factor -> . TRUE
    (80) factor -> . STRING_LITERAL
    (81) factor -> . CHAR_LITERAL
    (82) factor -> . FLOAT_LITERAL
    (83) factor -> . INTEGER_LITERAL
    (84) factor -> . ID
    {               shift and go to state 60
    RETURN          shift and go to state 78
    PRINT           shift and go to state 79
    FOR             shift and go to state 80
    IF              shift and go to state 81
    ID              shift and go to state 32
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LITERAL  shift and go to state 51
    CHAR_LITERAL    shift and go to state 52
    FLOAT_LITERAL   shift and go to state 53
    INTEGER_LITERAL shift and go to state 54

    if_cond                        shift and go to state 177
    closed_stmt                    shift and go to state 170
    simple_stmt                    shift and go to state 67
    for_stmt_closed                shift and go to state 68
    if_stmt_closed                 shift and go to state 69
    expr                           shift and go to state 72
    block_stmt                     shift and go to state 73
    return_stmt                    shift and go to state 74
    print_stmt                     shift and go to state 75
    for_header                     shift and go to state 172
    expr1                          shift and go to state 34
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 187

    (26) for_header -> FOR ( opt_expr ; opt_expr ; opt_expr . )
    )               shift and go to state 189


state 188

    (91) type_array -> ARRAY [ . ] type_array
    (92) type_array -> ARRAY [ . ] type_simple
    ]               shift and go to state 179


state 189

    (26) for_header -> FOR ( opt_expr ; opt_expr ; opt_expr ) .
    {               reduce using rule 26 (for_header -> FOR ( opt_expr ; opt_expr ; opt_expr ) .)
    RETURN          reduce using rule 26 (for_header -> FOR ( opt_expr ; opt_expr ; opt_expr ) .)
    PRINT           reduce using rule 26 (for_header -> FOR ( opt_expr ; opt_expr ; opt_expr ) .)
    FOR             reduce using rule 26 (for_header -> FOR ( opt_expr ; opt_expr ; opt_expr ) .)
    IF              reduce using rule 26 (for_header -> FOR ( opt_expr ; opt_expr ; opt_expr ) .)
    ID              reduce using rule 26 (for_header -> FOR ( opt_expr ; opt_expr ; opt_expr ) .)
    !               reduce using rule 26 (for_header -> FOR ( opt_expr ; opt_expr ; opt_expr ) .)
    -               reduce using rule 26 (for_header -> FOR ( opt_expr ; opt_expr ; opt_expr ) .)
    (               reduce using rule 26 (for_header -> FOR ( opt_expr ; opt_expr ; opt_expr ) .)
    FALSE           reduce using rule 26 (for_header -> FOR ( opt_expr ; opt_expr ; opt_expr ) .)
    TRUE            reduce using rule 26 (for_header -> FOR ( opt_expr ; opt_expr ; opt_expr ) .)
    STRING_LITERAL  reduce using rule 26 (for_header -> FOR ( opt_expr ; opt_expr ; opt_expr ) .)
    CHAR_LITERAL    reduce using rule 26 (for_header -> FOR ( opt_expr ; opt_expr ; opt_expr ) .)
    FLOAT_LITERAL   reduce using rule 26 (for_header -> FOR ( opt_expr ; opt_expr ; opt_expr ) .)
    INTEGER_LITERAL reduce using rule 26 (for_header -> FOR ( opt_expr ; opt_expr ; opt_expr ) .)
